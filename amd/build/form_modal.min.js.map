{"version":3,"file":"form_modal.min.js","sources":["../src/form_modal.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript for report card display and processing.\n *\n * @package    local_assessfreq\n * @copyright  2020 Matt Porritt <mattp@catalyst-au.net>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(\n    ['core/str', 'core/modal_factory', 'core/fragment', 'core/ajax'],\n    function (Str, ModalFactory, Fragment, Ajax) {\n\n        /**\n         * Module level variables.\n         */\n        var FormModal = {};\n        var contextid;\n        var modalObj;\n        var resetOptions = [];\n        var callback;\n\n        const spinner = '<p class=\"text-center\">'\n            + '<i class=\"fa fa-circle-o-notch fa-spin fa-3x fa-fw\"></i>'\n            + '</p>';\n\n        const observerConfig = { attributes: true, childList: false, subtree: true };\n\n        const ObserverCallback = function (mutationsList) {\n            for (let i = 0; i < mutationsList.length; i++) {\n                let element = mutationsList[i].target;\n                if (element.tagName.toLowerCase() === 'span' && element.classList.contains('badge')) {\n                    element.addEventListener('click', updateModalBody);\n                    document.getElementById('id_courses').dataset.course = element.dataset.value;\n\n                    document.getElementById('id_quiz').value = -1;\n                    Ajax.call([{\n                        methodname: 'local_assessfreq_get_quizzes',\n                        args: {\n                            query: mutationsList[i].target.dataset.value\n                        },\n                    }])[0].done((response) => {\n                        let quizArray = JSON.parse(response);\n                        let selectElement = document.getElementById('id_quiz');\n                        let selectElementLength = selectElement.options.length;\n                        if (document.getElementById('noquizwarning') !== null) {\n                            document.getElementById('noquizwarning').remove();\n                        }\n                        // Clear exisitng options.\n                        for (let j = selectElementLength - 1; j >= 0; j--) {\n                            selectElement.options[j] = null;\n                        }\n\n                        if (quizArray.length > 0) {\n                            // Add new options.\n                            for (let k = 0; k < quizArray.length; k++) {\n                                let opt = quizArray[k];\n                                let el = document.createElement('option');\n                                el.textContent = opt.name;\n                                el.value = opt.id;\n                                selectElement.appendChild(el);\n                            }\n                            selectElement.removeAttribute('disabled');\n                            if (document.getElementById('noquizwarning') !== null) {\n                                document.getElementById('noquizwarning').remove();\n                            }\n                        } else {\n                            resetOptions.forEach((option) => {\n                                selectElement.appendChild(option);\n                            });\n                            document.getElementById('id_quiz').value = 0;\n                            selectElement.disabled = true;\n                        }\n\n                    }).fail(() => {\n                        Notification.exception(new Error('Failed to get quizzes'));\n                    });\n\n                    break;\n                }\n            }\n        };\n\n        const observer = new MutationObserver(ObserverCallback);\n\n        /**\n         * Create the modal window.\n         *\n         * @private\n         */\n        const createModal = function () {\n            Str.get_string('loading', 'local_assessfreq').then((title) => {\n                // Create the Modal.\n                ModalFactory.create({\n                    type: ModalFactory.types.DEFAULT,\n                    title: title,\n                    body: spinner,\n                    large: true\n                })\n                .done((modal) => {\n                    modalObj = modal;\n\n                    // Explicitly handle form click events.\n                    modalObj.getRoot().on('click', '#id_submitbutton', processModalForm);\n                    modalObj.getRoot().on('click', '#id_cancel', (e) => {\n                        e.preventDefault();\n                        modalObj.setBody(spinner);\n                        modalObj.hide();\n                    });\n                });\n                return;\n            }).catch(() => {\n                return;\n            });\n        };\n\n        const getOptionPlaceholders = function () {\n            return new Promise((resolve, reject) => {\n                const stringArr = [\n                    {key: 'selectcourse', component: 'local_assessfreq'},\n                    {key: 'loadingquiz', component: 'local_assessfreq'},\n                ];\n\n                Str.get_strings(stringArr).catch(() => { // Get required strings.\n                    reject(new Error('Failed to load strings'));\n                    return;\n                }).then(stringReturn => { // Save string to global to be used later.\n                    for (let i = 0; i < stringReturn.length; i++) {\n                        let el = document.createElement('option');\n                        el.textContent = stringReturn[i];\n                        el.value = 0 - i;\n                        resetOptions.push(el);\n                    }\n                    resolve();\n                });\n            });\n        };\n\n        /**\n         * Updates the body of the modal window.\n         *\n         * @param {Object} formdata\n         * @private\n         */\n        const updateModalBody = function (formdata) {\n            if (typeof formdata === \"undefined\") {\n                formdata = {};\n            }\n\n            let params = {\n                'jsonformdata': JSON.stringify(formdata)\n            };\n\n            getOptionPlaceholders()\n            .then(() => {\n                Str.get_string('searchquiz', 'local_assessfreq').then((title) => {\n                    modalObj.setTitle(title);\n                    modalObj.setBody(Fragment.loadFragment('local_assessfreq', 'new_base_form', contextid, params));\n                    let modalContainer = document.querySelectorAll('[data-region*=\"modal-container\"]')[0];\n                    observer.observe(modalContainer, observerConfig);\n\n                    return;\n                }).catch(() => {\n                    return;\n                });\n            });\n        };\n\n        /**\n         * Updates Moodle form with selected information.\n         *\n         * @param {Object} e\n         * @private\n         */\n        const processModalForm = function (e) {\n            e.preventDefault(); // Stop modal from closing.\n\n            let quizElement = document.getElementById('id_quiz');\n            let quizId = quizElement.options[quizElement.selectedIndex].value;\n            let courseId = document.getElementById('id_courses').dataset.course;\n\n            if (courseId === undefined || quizId < 1) {\n                if (document.getElementById('noquizwarning') === null) {\n                    Str.get_string('noquizselected', 'local_assessfreq').then((warning) => {\n                        let element = document.createElement('div');\n                        element.innerHTML = warning;\n                        element.id = 'noquizwarning';\n                        element.classList.add('alert', 'alert-danger');\n                        modalObj.getBody().prepend(element);\n\n                        return;\n                    }).catch(() => {\n                        return;\n                    });\n                }\n            } else {\n                modalObj.hide(); // Close modal.\n                modalObj.setBody(''); // Cleaer form.\n                observer.disconnect(); // Remove observer.\n                callback(quizId, courseId); // Trigger dashboard update.\n            }\n\n        };\n\n        /**\n         * Display the Modal form.\n         */\n        const displayModalForm = function () {\n            updateModalBody();\n            modalObj.show();\n        };\n\n        /**\n         * Initialise method for quiz dashboard rendering.\n         */\n        FormModal.init = function (context, processDashboard) {\n            contextid = context;\n            callback = processDashboard;\n            createModal();\n\n            let createBroadcastButton = document.getElementById('local-assessfreq-find-quiz');\n            createBroadcastButton.addEventListener('click', displayModalForm);\n        };\n\n        return FormModal;\n    }\n);\n"],"names":["define","Str","ModalFactory","Fragment","Ajax","contextid","modalObj","callback","FormModal","resetOptions","spinner","observerConfig","attributes","childList","subtree","observer","MutationObserver","mutationsList","i","length","element","target","tagName","toLowerCase","classList","contains","addEventListener","updateModalBody","document","getElementById","dataset","course","value","call","methodname","args","query","done","response","quizArray","JSON","parse","selectElement","selectElementLength","options","remove","j","k","opt","el","createElement","textContent","name","id","appendChild","removeAttribute","forEach","option","disabled","fail","Notification","exception","Error","formdata","params","stringify","Promise","resolve","reject","get_strings","key","component","catch","then","stringReturn","push","get_string","title","setTitle","setBody","loadFragment","modalContainer","querySelectorAll","observe","processModalForm","e","preventDefault","quizElement","quizId","selectedIndex","courseId","undefined","warning","innerHTML","add","getBody","prepend","hide","disconnect","displayModalForm","show","init","context","processDashboard","create","type","types","DEFAULT","body","large","modal","getRoot","on"],"mappings":"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"}