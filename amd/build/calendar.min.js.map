{"version":3,"file":"calendar.min.js","sources":["../src/calendar.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript for heatmap calendar generation and display.\n *\n * @package    local_assessfreq\n * @copyright  2020 Matt Porritt <mattp@catalyst-au.net>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(['core/str', 'core/notification', 'core/ajax'], function (Str, Notification, Ajax) {\n\n    /**\n     * Module level variables.\n     */\n    var Calendar = {};\n    var eventArray = [];\n    const stringArr = [\n        {key: 'sun', component: 'calendar'},\n        {key: 'mon', component: 'calendar'},\n        {key: 'tue', component: 'calendar'},\n        {key: 'wed', component: 'calendar'},\n        {key: 'thu', component: 'calendar'},\n        {key: 'fri', component: 'calendar'},\n        {key: 'sat', component: 'calendar'},\n        {key: 'jan', component: 'local_assessfreq'},\n        {key: 'feb', component: 'local_assessfreq'},\n        {key: 'mar', component: 'local_assessfreq'},\n        {key: 'apr', component: 'local_assessfreq'},\n        {key: 'may', component: 'local_assessfreq'},\n        {key: 'jun', component: 'local_assessfreq'},\n        {key: 'jul', component: 'local_assessfreq'},\n        {key: 'aug', component: 'local_assessfreq'},\n        {key: 'sep', component: 'local_assessfreq'},\n        {key: 'oct', component: 'local_assessfreq'},\n        {key: 'nov', component: 'local_assessfreq'},\n        {key: 'dec', component: 'local_assessfreq'},\n    ];\n    var stringResult;\n    var heatRangeMax;\n    var heatRangeMin;\n    var colorArray;\n    var processModules;\n    var heatRangeScale = {'1': 0, '2': 0, '3': 0, '4': 0, '5': 0, '6': 0};\n\n    /**\n     * Pick a contrasting text color based on the background color.\n     *\n     * @param  {String} A hexcolor value.\n     * @return {String} The contrasting color (black or white).\n     */\n    const getContrast = function (hexcolor) {\n\n        if (typeof (hexcolor) === \"undefined\") {\n            return '#000000';\n        }\n\n        // If a leading # is provided, remove it.\n        if (hexcolor.slice(0, 1) === '#') {\n            hexcolor = hexcolor.slice(1);\n        }\n\n        // Convert to RGB value.\n        var r = parseInt(hexcolor.substr(0,2),16);\n        var g = parseInt(hexcolor.substr(2,2),16);\n        var b = parseInt(hexcolor.substr(4,2),16);\n\n        // Get YIQ ratio.\n        var yiq = ((r * 299) + (g * 587) + (b * 114)) / 1000;\n\n        // Check contrast.\n        return (yiq >= 128) ? '#000000' : '#FFFFFF';\n    };\n\n    /**\n     * Check how many days in a month code.\n     * from https://dzone.com/articles/determining-number-days-month.\n     *\n     * @method daysInMonth\n     * @param {Number} month The month to get the number of days for.\n     * @param {Number} year The year to get the number of days for.\n     */\n    const daysInMonth = function (month, year) {\n        return 32 - new Date(year, month, 32).getDate();\n    };\n\n    /**\n     * Get the heat colors to use in the heat map via Ajax.\n     *\n     * @method getHeatColors\n     */\n    const getHeatColors = function () {\n        return new Promise((resolve, reject) => {\n            Ajax.call([{\n                methodname: 'local_assessfreq_get_heat_colors',\n                args: {},\n            }], true, false)[0].done(function (response) {\n                colorArray = JSON.parse(response);\n                resolve(colorArray);\n            }).fail(function () {\n                reject(new Error('Failed to get heat colors'));\n            });\n        });\n    };\n\n    /**\n     * Get the event names that we are processing.\n     *\n     * @method getProcessEvents\n     */\n    const getProcessModules = function () {\n        return new Promise((resolve, reject) => {\n            Ajax.call([{\n                methodname: 'local_assessfreq_get_process_modules',\n                args: {},\n            }], true, false)[0].done(function (response) {\n                processModules = JSON.parse(response);\n                resolve(processModules);\n            }).fail(function () {\n                reject(new Error('Failed to get process events'));\n            });\n        });\n    };\n\n    /**\n     * Calculate the min and max values to use in the heatmap.\n     *\n     * @method daysInMonth\n     * @param {Object} eventArray All the event count for the heatmap.\n     * @param {Object} dateObj Date details.\n     */\n    const calcHeatRange = function (eventArray, dateObj) {\n        return new Promise((resolve) => {\n\n            // Resolve early if there are no events.\n            if (typeof (eventArray) === \"undefined\") {\n                heatRangeMax = 0;\n                heatRangeMin = 0;\n\n                resolve(eventArray);\n            }\n            // If scheduled tasks have not run yet we may not have any data.\n            let eventArrayLength = Object.keys(eventArray).length;\n            if ((eventArrayLength > 0) && (eventArray[dateObj.year] !== \"undefined\")) {\n                let eventcount = new Array;\n                let year = eventArray[dateObj.year];\n\n                // Iterate through all the event counts.\n                // This code looks nasty but there is only 366 days in a year.\n                for (let i = 0; i < 12; i++) {\n                    if (typeof year[i] !== \"undefined\") {\n                        let month = year[i];\n                        for (let j = 0; j < 32; j++) {\n                            if (typeof month[j] !== \"undefined\") {\n                                eventcount.push(month[j].number);\n                            }\n                        }\n                    }\n                }\n\n                // Get min and max values to calculate heat spread.\n                heatRangeMax = Math.max(...eventcount);\n                heatRangeMin = Math.min(...eventcount);\n            } else {\n                heatRangeMax = 0;\n                heatRangeMin = 0;\n            }\n\n            resolve(eventArray);\n        });\n    };\n\n    /**\n     * Translate assessment frequency to a heat value.\n     *\n     * @method getHeat\n     * @param {Number} eventCount The count to get the heat value.\n     * @return {Number} heat The heat value.\n     */\n    const getHeat = function (eventCount) {\n        let scaleMin = 1;\n\n        if (eventCount == heatRangeMin) {\n            return scaleMin;\n        }\n\n        const scaleRange = 5;  // 0 - 5  steps.\n        const localRange = heatRangeMax - heatRangeMin;\n        const localPercent = (eventCount - heatRangeMin) / localRange;\n        let heat = Math.round((localPercent * scaleRange) + 1);\n\n        // Clamp values.\n        if (heat < 1) {\n            heat = 1;\n        }\n\n        if (heat > 6) {\n            heat = 6;\n        }\n\n        return heat;\n    };\n\n    /**\n     * Get the events to display in the calendar via ajax call.\n     *\n     * @method getEvents\n     * @param {Number} year The year to get the events for.\n     * @param {String} metric The type of metric to get, 'students' or 'assess'.\n     * @param {Array} modules Array of the modules to get.\n     * @return {Promise}\n     */\n    const getEvents = function ({year, metric, modules}) {\n        return new Promise((resolve, reject) => {\n            let args = {\n                year: year,\n                metric: metric,\n                modules: modules\n            };\n            let jsonArgs = JSON.stringify(args);\n\n            // Get the events to use in the mapping.\n            Ajax.call([{\n                methodname: 'local_assessfreq_get_frequency',\n                args: {\n                    jsondata: jsonArgs\n                },\n            }])[0].done((response) => {\n                eventArray = JSON.parse(response);\n                resolve(eventArray);\n            }).fail(() => {\n                reject(new Error('Failed to get events'));\n            });\n        });\n    };\n\n    /**\n     * Get the events for a particular month and year.\n     *\n     * @param {Number} year The year to get the number of days for.\n     * @param {Number} month The month to get the number of days for.\n     * @return {Array} monthevents The events for the supplied month.\n     */\n    const getMonthEvents = function (year, month) {\n        let monthevents;\n\n        if ((typeof eventArray[year] !== \"undefined\") && (typeof eventArray[year][month] !== \"undefined\")) {\n            monthevents = eventArray[year][month];\n        }\n\n        return monthevents;\n    };\n\n    /**\n     * Create the table structure for the calendar months.\n     *\n     * @oaram {Number} year The year to generate the tables for.\n     * @param {Number} startMonth The month to start table generation from.\n     * @param {Number} endMonth The month to generate the tables to.\n     * @return {Promise}\n     */\n    const createTables = function ({year, startMonth, endMonth}) {\n        return new Promise((resolve, reject) => {\n            let calendarContainer = document.createElement('div');\n            let month = startMonth;\n\n            // Itterate through and build are tables.\n            for (let i = startMonth; i <= endMonth; i++) {\n                // Setup some elements.\n                let container = document.createElement('div');\n                container.classList.add('local-assessfreq-month');\n                let table = document.createElement('table');\n                table.classList.add('table-striped');\n                let thead = document.createElement('thead');\n                let tbody = document.createElement('tbody');\n                tbody.id = 'calendar-body-' + i;\n                let monthRow = document.createElement('tr');\n                let dayrow = document.createElement('tr');\n                let monthHeader = document.createElement('th');\n                monthHeader.colSpan = 7;\n                monthHeader.innerHTML = stringResult[(7 + month)];\n\n                for (let j = 0; j < 7; j++) {\n                    let dayHeader = document.createElement('th');\n                    dayHeader.innerHTML = stringResult[j];\n                    dayrow.appendChild(dayHeader);\n                }\n\n                // Construct the table.\n                monthRow.appendChild(monthHeader);\n\n                thead.appendChild(monthRow);\n                thead.appendChild(dayrow);\n\n                table.appendChild(thead);\n                table.appendChild(tbody);\n\n                container.appendChild(table);\n\n                // Add to parent.\n                calendarContainer.appendChild(container);\n\n                // Increment variables.\n                month++;\n            }\n\n            if ((typeof year === 'undefined') || (typeof startMonth === 'undefined') || (typeof endMonth === 'undefined')) {\n                reject(Error('Failed to create calendar tables.'));\n            } else {\n                const resultObj = {\n                    calendarContainer : calendarContainer,\n                    year : year,\n                    startMonth : startMonth\n                };\n                resolve(resultObj);\n            }\n        });\n    };\n\n    /**\n     * Generate the tooltip HTML.\n     *\n     * @param {Object} dayArray The details of the events for that day/\n     * @return {String} tipHTML The HTML for the tooltip.\n     */\n    const getTooltip = function (dayArray) {\n        let tipHTML = '';\n\n        for (let [key, value] of Object.entries(dayArray)) {\n            tipHTML += '<strong>' + processModules[key] + ':</strong> ' + value + '<br/>';\n        }\n\n        return tipHTML;\n    };\n\n    /**\n     * Generate calendar markup for the month.\n     *\n     * @param {Object} table The base table to populate.\n     * @param {Number} year The year to generate calendar for.\n     * @param {Number} month The monthe to generate calendar for.\n     */\n    const populateCalendarDays = function (table, year, month) {\n        let firstDay = (new Date(year, month)).getDay();  // Get the starting day of the month.\n        let monthEvents = getMonthEvents(year, (month + 1));  // We add one due to month diferences between PHP and JS.\n        let date = 1;  // Creating all cells.\n\n        for (let i = 0; i < 6; i++) {\n            let row = document.createElement(\"tr\"); // Creates a table row.\n\n            // Creating individual cells, filing them up with data.\n            for (let j = 0; j < 7; j++) {\n                if (i === 0 && j < firstDay) {\n                    var cell = document.createElement(\"td\");\n                    var cellText = document.createTextNode(\"\");\n                    cell.dataset.event = 'false';\n                } else if (date > daysInMonth(month, year)) { // Break if we have generated all the days for this month.\n                    break;\n                } else {\n                    cell = document.createElement(\"td\");\n                    cellText = document.createTextNode(date);\n                    if ((typeof monthEvents !== \"undefined\") && (monthEvents.hasOwnProperty(date))) {\n                        let heat = getHeat(monthEvents[date]['number']);\n\n                        if (heatRangeScale[heat] == 0 || heatRangeScale[heat] > monthEvents[date]['number']) {\n                            heatRangeScale[heat] = monthEvents[date]['number'];\n                        }\n\n                        cell.style.backgroundColor = colorArray[heat];\n                        cell.style.color = getContrast(colorArray[heat]);\n\n                        // Add tooltip to cell.\n                        cell.dataset.toggle = 'tooltip';\n                        cell.dataset.html = 'true';\n                        cell.dataset.event = 'true';\n                        cell.dataset.date = year + '-' + (month + 1) + '-' + date;\n                        cell.title = getTooltip(monthEvents[date]);\n                        cell.style.cursor = \"pointer\";\n                    }\n                    date++;\n                }\n\n                cell.appendChild(cellText);\n                row.appendChild(cell);\n            }\n            table.appendChild(row); // Appending each row into calendar body.\n        }\n    };\n\n    /**\n     * Controls the population of the calendar in to the base tables.\n     *\n     * @param {Object} calendarContainer the container to populate.\n     * @param {Number} year The year to generate calendar for.\n     * @param {Number} startMonth The month to start generation from.\n     * @return {Promise}\n     */\n    const populateCalendar = function ({calendarContainer, year, startMonth}) {\n        return new Promise((resolve, reject) => {\n            // Get the table boodies.\n            let tables = calendarContainer.getElementsByTagName(\"tbody\");\n            let month = startMonth;\n\n            // For each table body populate with calendar.\n            for (var i = 0; i < tables.length; i++) {\n                let table = tables[i];\n                populateCalendarDays(table, year, month);\n                month++;\n            }\n\n            if (typeof calendarContainer === 'undefined') {\n                reject(Error('Failed to populate calendar tables.'));\n            } else {\n                resolve(calendarContainer);\n            }\n        });\n    };\n\n    /**\n     * Create the heatmap scale for the calendar.\n     *\n     * @method createHeatScale\n     */\n    Calendar.createHeatScale = function () {\n        return new Promise((resolve) => {\n            let table = document.createElement('table');\n            let tbody = document.createElement('tbody');\n            let trow = document.createElement('tr');\n\n            for (var i = 1; i < 7; i++) {\n                if (heatRangeScale[i] !== 0) {\n                    let cell = document.createElement('td');\n                    let cellText = document.createTextNode(heatRangeScale[i] + '+');\n\n                    cell.appendChild(cellText);\n                    cell.style.backgroundColor = colorArray[i];\n                    cell.style.color = getContrast(colorArray[i]);\n\n                    trow.appendChild(cell);\n                }\n            }\n\n            tbody.appendChild(trow);\n            table.appendChild(tbody);\n\n            // Reset heat range scale.\n            heatRangeScale = {'1': 0, '2': 0, '3': 0, '4': 0, '5': 0, '6': 0};\n\n            resolve(table);\n        });\n    };\n\n    /**\n     * Initialise method for report calendar heatmap creation.\n     *\n     * @param {Number} year The year to generate the heatmap for.\n     * @param {Number} startMonth The month to start with for the heatmap calendar.\n     * @param {Number} endMonth The month to end with for the heatmap calendar.\n     * @param {String} metric The type of metric to display, 'students' or 'aseess'.\n     * @param {Array} modules The modules to display in the heatamp.\n     * @return {Promise}\n     */\n    Calendar.generate = function (year, startMonth, endMonth, metric, modules) {\n        return new Promise((resolve, reject) => {\n            const dateObj = {\n                year : year,\n                startMonth : startMonth,\n                endMonth : endMonth\n            };\n\n            const eventObj = {\n                year : year,\n                metric : metric,\n                modules : modules\n            };\n\n            Str.get_strings(stringArr).catch(() => { // Get required strings.\n                Notification.exception(new Error('Failed to load strings'));\n                return;\n            }).then(stringReturn => { // Save string to global to be used later.\n                stringResult = stringReturn;\n                return eventObj;\n            })\n            .then(getEvents)\n            .then((eventArray) => {\n                calcHeatRange(eventArray, dateObj);\n            })\n            .then(getHeatColors)\n            .then(getProcessModules)\n            .then(() => {\n                return dateObj;\n            })\n            .then(createTables) // Create tables for calendar.\n            .then(populateCalendar)\n            .then((calendarHTML) => { // Return the result of the generate function.\n                if (typeof calendarHTML !== 'undefined') {\n                    resolve(calendarHTML);\n                } else {\n                    reject(Error('Could not generate calendar'));\n                }\n            });\n        });\n\n    };\n\n    return Calendar;\n});\n"],"names":["define","Str","Notification","Ajax","Calendar","eventArray","stringArr","key","component","stringResult","heatRangeMax","heatRangeMin","colorArray","processModules","heatRangeScale","getContrast","hexcolor","slice","parseInt","substr","daysInMonth","month","year","Date","getDate","getHeatColors","Promise","resolve","reject","call","methodname","args","done","response","JSON","parse","fail","Error","getProcessModules","getHeat","eventCount","localPercent","heat","Math","round","getEvents","metric","modules","jsonArgs","stringify","jsondata","createTables","startMonth","endMonth","calendarContainer","document","createElement","i","container","classList","add","table","thead","tbody","id","monthRow","dayrow","monthHeader","colSpan","innerHTML","j","dayHeader","appendChild","getTooltip","dayArray","tipHTML","value","Object","entries","populateCalendarDays","firstDay","getDay","monthEvents","monthevents","getMonthEvents","date","row","cell","cellText","createTextNode","dataset","event","hasOwnProperty","style","backgroundColor","color","toggle","html","title","cursor","populateCalendar","tables","getElementsByTagName","length","createHeatScale","trow","generate","dateObj","eventObj","get_strings","catch","exception","then","stringReturn","keys","eventcount","Array","push","number","max","min","calcHeatRange","calendarHTML"],"mappings":";;;;;;;AAuBAA,mCAAO,CAAC,WAAY,oBAAqB,cAAc,SAAUC,IAAKC,aAAcC,UAK5EC,SAAW,GACXC,WAAa,SACXC,UAAY,CACd,CAACC,IAAK,MAAOC,UAAW,YACxB,CAACD,IAAK,MAAOC,UAAW,YACxB,CAACD,IAAK,MAAOC,UAAW,YACxB,CAACD,IAAK,MAAOC,UAAW,YACxB,CAACD,IAAK,MAAOC,UAAW,YACxB,CAACD,IAAK,MAAOC,UAAW,YACxB,CAACD,IAAK,MAAOC,UAAW,YACxB,CAACD,IAAK,MAAOC,UAAW,oBACxB,CAACD,IAAK,MAAOC,UAAW,oBACxB,CAACD,IAAK,MAAOC,UAAW,oBACxB,CAACD,IAAK,MAAOC,UAAW,oBACxB,CAACD,IAAK,MAAOC,UAAW,oBACxB,CAACD,IAAK,MAAOC,UAAW,oBACxB,CAACD,IAAK,MAAOC,UAAW,oBACxB,CAACD,IAAK,MAAOC,UAAW,oBACxB,CAACD,IAAK,MAAOC,UAAW,oBACxB,CAACD,IAAK,MAAOC,UAAW,oBACxB,CAACD,IAAK,MAAOC,UAAW,oBACxB,CAACD,IAAK,MAAOC,UAAW,yBAExBC,aACAC,aACAC,aACAC,WACAC,eACAC,eAAiB,GAAM,IAAQ,IAAQ,IAAQ,IAAQ,IAAQ,SAQ7DC,YAAc,SAAUC,sBAEA,IAAdA,SACD,WAIkB,MAAzBA,SAASC,MAAM,EAAG,KAClBD,SAAWA,SAASC,MAAM,KASd,IALRC,SAASF,SAASG,OAAO,EAAE,GAAG,IAKV,IAJpBD,SAASF,SAASG,OAAO,EAAE,GAAG,IAIE,IAHhCD,SAASF,SAASG,OAAO,EAAE,GAAG,KAGU,KAGjC,IAAO,UAAY,YAWhCC,YAAc,SAAUC,MAAOC,aAC1B,GAAK,IAAIC,KAAKD,KAAMD,MAAO,IAAIG,WAQpCC,cAAgB,kBACX,IAAIC,SAAQ,CAACC,QAASC,UACzBzB,KAAK0B,KAAK,CAAC,CACPC,WAAY,mCACZC,KAAM,MACN,GAAM,GAAO,GAAGC,MAAK,SAAUC,UAC/BrB,WAAasB,KAAKC,MAAMF,UACxBN,QAAQf,eACTwB,MAAK,WACJR,OAAO,IAAIS,MAAM,qCAUvBC,kBAAoB,kBACf,IAAIZ,SAAQ,CAACC,QAASC,UACzBzB,KAAK0B,KAAK,CAAC,CACPC,WAAY,uCACZC,KAAM,MACN,GAAM,GAAO,GAAGC,MAAK,SAAUC,UAC/BpB,eAAiBqB,KAAKC,MAAMF,UAC5BN,QAAQd,mBACTuB,MAAK,WACJR,OAAO,IAAIS,MAAM,wCA4DvBE,QAAU,SAAUC,eAGlBA,YAAc7B,oBAFH,QAQT8B,cAAgBD,WAAa7B,eADhBD,aAAeC,kBAE9B+B,KAAOC,KAAKC,MAHG,EAGIH,aAA6B,UAGhDC,KAAO,IACPA,KAAO,GAGPA,KAAO,IACPA,KAAO,GAGJA,MAYLG,UAAY,mBAAUvB,KAACA,KAADwB,OAAOA,OAAPC,QAAeA,qBAChC,IAAIrB,SAAQ,CAACC,QAASC,cACrBG,KAAO,CACPT,KAAMA,KACNwB,OAAQA,OACRC,QAASA,SAETC,SAAWd,KAAKe,UAAUlB,MAG9B5B,KAAK0B,KAAK,CAAC,CACPC,WAAY,iCACZC,KAAM,CACFmB,SAAUF,aAEd,GAAGhB,MAAMC,WACT5B,WAAa6B,KAAKC,MAAMF,UACxBN,QAAQtB,eACT+B,MAAK,KACJR,OAAO,IAAIS,MAAM,gCA8BvBc,aAAe,oBAAU7B,KAACA,KAAD8B,WAAOA,WAAPC,SAAmBA,uBACvC,IAAI3B,SAAQ,CAACC,QAASC,cACrB0B,kBAAoBC,SAASC,cAAc,OAC3CnC,MAAQ+B,eAGP,IAAIK,EAAIL,WAAYK,GAAKJ,SAAUI,IAAK,KAErCC,UAAYH,SAASC,cAAc,OACvCE,UAAUC,UAAUC,IAAI,8BACpBC,MAAQN,SAASC,cAAc,SACnCK,MAAMF,UAAUC,IAAI,qBAChBE,MAAQP,SAASC,cAAc,SAC/BO,MAAQR,SAASC,cAAc,SACnCO,MAAMC,GAAK,iBAAmBP,MAC1BQ,SAAWV,SAASC,cAAc,MAClCU,OAASX,SAASC,cAAc,MAChCW,YAAcZ,SAASC,cAAc,MACzCW,YAAYC,QAAU,EACtBD,YAAYE,UAAY5D,aAAc,EAAIY,WAErC,IAAIiD,EAAI,EAAGA,EAAI,EAAGA,IAAK,KACpBC,UAAYhB,SAASC,cAAc,MACvCe,UAAUF,UAAY5D,aAAa6D,GACnCJ,OAAOM,YAAYD,WAIvBN,SAASO,YAAYL,aAErBL,MAAMU,YAAYP,UAClBH,MAAMU,YAAYN,QAElBL,MAAMW,YAAYV,OAClBD,MAAMW,YAAYT,OAElBL,UAAUc,YAAYX,OAGtBP,kBAAkBkB,YAAYd,WAG9BrC,gBAGiB,IAATC,WAAgD,IAAf8B,iBAAoD,IAAbC,SAChFzB,OAAOS,MAAM,0CACV,CAMHV,QALkB,CACd2B,kBAAoBA,kBACpBhC,KAAOA,KACP8B,WAAaA,kBAavBqB,WAAa,SAAUC,cACrBC,QAAU,OAET,IAAKpE,IAAKqE,SAAUC,OAAOC,QAAQJ,UACpCC,SAAW,WAAa9D,eAAeN,KAAO,cAAgBqE,MAAQ,eAGnED,SAULI,qBAAuB,SAAUlB,MAAOvC,KAAMD,WAC5C2D,SAAY,IAAIzD,KAAKD,KAAMD,OAAQ4D,SACnCC,YArGe,SAAU5D,KAAMD,WAC/B8D,wBAE6B,IAArB9E,WAAWiB,YAA8D,IAA5BjB,WAAWiB,MAAMD,SACtE8D,YAAc9E,WAAWiB,MAAMD,QAG5B8D,YA8FWC,CAAe9D,KAAOD,MAAQ,GAC5CgE,KAAO,MAEN,IAAI5B,EAAI,EAAGA,EAAI,EAAGA,IAAK,KACpB6B,IAAM/B,SAASC,cAAc,UAG5B,IAAIc,EAAI,EAAGA,EAAI,EAAGA,IAAK,IACd,IAANb,GAAWa,EAAIU,SAAU,KACrBO,KAAOhC,SAASC,cAAc,MAC9BgC,SAAWjC,SAASkC,eAAe,IACvCF,KAAKG,QAAQC,MAAQ,YAClB,CAAA,GAAIN,KAAOjE,YAAYC,MAAOC,eAGjCiE,KAAOhC,SAASC,cAAc,MAC9BgC,SAAWjC,SAASkC,eAAeJ,WACP,IAAhBH,aAAiCA,YAAYU,eAAeP,MAAQ,KACxE3C,KAAOH,QAAQ2C,YAAYG,MAAZ,SAES,GAAxBvE,eAAe4B,OAAc5B,eAAe4B,MAAQwC,YAAYG,MAAZ,UACpDvE,eAAe4B,MAAQwC,YAAYG,MAAZ,QAG3BE,KAAKM,MAAMC,gBAAkBlF,WAAW8B,MACxC6C,KAAKM,MAAME,MAAQhF,YAAYH,WAAW8B,OAG1C6C,KAAKG,QAAQM,OAAS,UACtBT,KAAKG,QAAQO,KAAO,OACpBV,KAAKG,QAAQC,MAAQ,OACrBJ,KAAKG,QAAQL,KAAO/D,KAAO,KAAOD,MAAQ,GAAK,IAAMgE,KACrDE,KAAKW,MAAQzB,WAAWS,YAAYG,OACpCE,KAAKM,MAAMM,OAAS,UAExBd,OAGJE,KAAKf,YAAYgB,UACjBF,IAAId,YAAYe,MAEpB1B,MAAMW,YAAYc,OAYpBc,iBAAmB,oBAAU9C,kBAACA,kBAADhC,KAAoBA,KAApB8B,WAA0BA,yBAClD,IAAI1B,SAAQ,CAACC,QAASC,cAErByE,OAAS/C,kBAAkBgD,qBAAqB,SAChDjF,MAAQ+B,eAGP,IAAIK,EAAI,EAAGA,EAAI4C,OAAOE,OAAQ9C,IAAK,KAChCI,MAAQwC,OAAO5C,GACnBsB,qBAAqBlB,MAAOvC,KAAMD,OAClCA,aAG6B,IAAtBiC,kBACP1B,OAAOS,MAAM,wCAEbV,QAAQ2B,8BAUpBlD,SAASoG,gBAAkB,kBAChB,IAAI9E,SAASC,cACZkC,MAAQN,SAASC,cAAc,SAC/BO,MAAQR,SAASC,cAAc,SAC/BiD,KAAOlD,SAASC,cAAc,UAE7B,IAAIC,EAAI,EAAGA,EAAI,EAAGA,OACO,IAAtB3C,eAAe2C,GAAU,KACrB8B,KAAOhC,SAASC,cAAc,MAC9BgC,SAAWjC,SAASkC,eAAe3E,eAAe2C,GAAK,KAE3D8B,KAAKf,YAAYgB,UACjBD,KAAKM,MAAMC,gBAAkBlF,WAAW6C,GACxC8B,KAAKM,MAAME,MAAQhF,YAAYH,WAAW6C,IAE1CgD,KAAKjC,YAAYe,MAIzBxB,MAAMS,YAAYiC,MAClB5C,MAAMW,YAAYT,OAGlBjD,eAAiB,GAAM,IAAQ,IAAQ,IAAQ,IAAQ,IAAQ,GAE/Da,QAAQkC,WAchBzD,SAASsG,SAAW,SAAUpF,KAAM8B,WAAYC,SAAUP,OAAQC,gBACvD,IAAIrB,SAAQ,CAACC,QAASC,gBACnB+E,QAAU,CACZrF,KAAOA,KACP8B,WAAaA,WACbC,SAAWA,UAGTuD,SAAW,CACbtF,KAAOA,KACPwB,OAASA,OACTC,QAAUA,SAGd9C,IAAI4G,YAAYvG,WAAWwG,OAAM,KAC7B5G,aAAa6G,UAAU,IAAI1E,MAAM,8BAElC2E,MAAKC,eACJxG,aAAewG,aACRL,YAEVI,KAAKnE,WACLmE,MAAM3G,cAjWO,SAAUA,WAAYsG,SACjC,IAAIjF,SAASC,kBAGY,IAAhBtB,aACRK,aAAe,EACfC,aAAe,EAEfgB,QAAQtB,aAGWwE,OAAOqC,KAAK7G,YAAYkG,OACvB,GAAoC,cAA7BlG,WAAWsG,QAAQrF,MAAwB,KAClE6F,WAAa,IAAIC,MACjB9F,KAAOjB,WAAWsG,QAAQrF,UAIzB,IAAImC,EAAI,EAAGA,EAAI,GAAIA,YACG,IAAZnC,KAAKmC,GAAoB,KAC5BpC,MAAQC,KAAKmC,OACZ,IAAIa,EAAI,EAAGA,EAAI,GAAIA,SACI,IAAbjD,MAAMiD,IACb6C,WAAWE,KAAKhG,MAAMiD,GAAGgD,QAOzC5G,aAAeiC,KAAK4E,OAAOJ,YAC3BxG,aAAegC,KAAK6E,OAAOL,iBAE3BzG,aAAe,EACfC,aAAe,EAGnBgB,QAAQtB,eA6TJoH,CAAcpH,WAAYsG,YAE7BK,KAAKvF,eACLuF,KAAK1E,mBACL0E,MAAK,IACKL,UAEVK,KAAK7D,cACL6D,KAAKZ,kBACLY,MAAMU,oBACyB,IAAjBA,aACP/F,QAAQ+F,cAER9F,OAAOS,MAAM,uCAOtBjC"}