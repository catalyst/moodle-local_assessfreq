{"version":3,"file":"student_search.min.js","sources":["../src/student_search.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript for student search display and processing.\n *\n * @module     local_assessfreq/student_search\n * @package    local_assessfreq\n * @copyright  2020 Matt Porritt <mattp@catalyst-au.net>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport $ from 'jquery';\nimport Notification from 'core/notification';\nimport OverrideModal from 'local_assessfreq/override_modal';\nimport * as TableHandler from 'local_assessfreq/table_handler';\nimport * as UserPreference from 'local_assessfreq/user_preferences';\n\n/**\n * Module level variables.\n */\nvar contextid;\nvar hoursAhead = 4;\nvar hoursBehind = 1;\nvar refreshPeriod = 60;\nvar counterid;\n\n/**\n * Function for refreshing the counter.\n *\n * @param {boolean} reset the current count process.\n */\nconst refreshCounter = (reset = true) => {\n    let progressElement = document.getElementById('local-assessfreq-period-progress');\n\n    // Reset the current count process.\n    if (reset === true) {\n        clearInterval(counterid);\n        counterid = null;\n        progressElement.setAttribute('style', 'width: 100%');\n        progressElement.setAttribute('aria-valuenow', 100);\n    }\n\n    // Exit early if there is already a counter running.\n    if (counterid) {\n        return;\n    }\n\n    counterid = setInterval(() => {\n        let progressWidthAria = progressElement.getAttribute('aria-valuenow');\n        const progressStep = 100 / refreshPeriod;\n\n        if ((progressWidthAria - progressStep) > 0) {\n            progressElement.setAttribute('style', 'width: ' + (progressWidthAria - progressStep) + '%');\n            progressElement.setAttribute('aria-valuenow', (progressWidthAria - progressStep));\n        } else {\n            clearInterval(counterid);\n            counterid = null;\n            progressElement.setAttribute('style', 'width: 100%');\n            progressElement.setAttribute('aria-valuenow', 100);\n            TableHandler.getTable(0, [hoursAhead, hoursBehind], null);\n            refreshCounter();\n        }\n    }, (1000));\n};\n\n/**\n * Process the hours ahead event from the student table.\n *\n * @param {Event} event The triggered event for the element.\n */\nconst tableSearchAheadSet = (event) => {\n    event.preventDefault();\n    if (event.target.tagName.toLowerCase() === 'a') {\n        let hours = event.target.dataset.metric;\n        UserPreference.setUserPreference('local_assessfreq_student_search_table_hoursahead_preference', hours)\n        .then(() => {\n            hoursAhead = hours;\n            TableHandler.getTable(0, [hoursAhead, hoursBehind], null); // Reload the table. // Reload the table.\n        })\n        .fail(() => {\n            Notification.exception(new Error('Failed to update user preference: hours ahead'));\n        });\n    }\n};\n\n/**\n * Process the hours behind event from the student table.\n *\n * @param {Event} event The triggered event for the element.\n */\nconst tableSearchBehindSet = (event) => {\n    event.preventDefault();\n    if (event.target.tagName.toLowerCase() === 'a') {\n        let hours = event.target.dataset.metric;\n        UserPreference.setUserPreference('local_assessfreq_student_search_table_hoursbehind_preference', hours)\n        .then(() => {\n            hoursBehind = hours;\n            TableHandler.getTable(0, [hoursAhead, hoursBehind], null); // Reload the table. // Reload the table.\n        })\n        .fail(() => {\n            Notification.exception(new Error('Failed to update user preference: hours behind'));\n        });\n    }\n};\n\n/**\n * Handle processing of refresh and period button actions.\n *\n * @param {Event} event The triggered event for the element.\n */\nconst refreshAction = (event) => {\n    event.preventDefault();\n    var element = event.target;\n\n    if (element.closest('button') !== null && element.closest('button').id === 'local-assessfreq-refresh-quiz-dashboard') {\n        refreshCounter(true);\n        TableHandler.getTable(0, [hoursAhead, hoursBehind], null);\n    } else if (element.tagName.toLowerCase() === 'a') {\n        refreshPeriod = element.dataset.period;\n        refreshCounter(true);\n        UserPreference.setUserPreference('local_assessfreq_quiz_refresh_preference', refreshPeriod);\n    }\n};\n\n/**\n * Initialise method for student search.\n *\n * @param {integer} context The current context id.\n */\nexport const init = (context) => {\n    contextid = context;\n    TableHandler.init(\n        0,\n        contextid,\n        'local-assessfreq-student-search-table',\n        'local-assessfreq-student-search',\n        'get_student_search_table',\n        'local_assessfreq_student_search_table_rows_preference',\n        'local-assessfreq-quiz-student-table-search',\n        'local_assessfreq_student_search_table',\n        'local_assessfreq_set_table_preference'\n    );\n\n    // Add required initial event listeners.\n    let tableSearchInputElement = document.getElementById('local-assessfreq-quiz-student-table-search');\n    let tableSearchResetElement = document.getElementById('local-assessfreq-quiz-student-table-search-reset');\n    let tableSearchRowsElement = document.getElementById('local-assessfreq-quiz-student-table-rows');\n    let tableSearchAheadElement = document.getElementById('local-assessfreq-quiz-student-table-hoursahead');\n    let tableSearchBehindElement = document.getElementById('local-assessfreq-quiz-student-table-hoursbehind');\n    let refreshElement = document.getElementById('local-assessfreq-period-container');\n\n    tableSearchInputElement.addEventListener('keyup', TableHandler.tableSearch);\n    tableSearchInputElement.addEventListener('paste', TableHandler.tableSearch);\n    tableSearchResetElement.addEventListener('click', TableHandler.tableSearchReset);\n    tableSearchRowsElement.addEventListener('click', TableHandler.tableSearchRowSet);\n    tableSearchAheadElement.addEventListener('click', tableSearchAheadSet);\n    tableSearchBehindElement.addEventListener('click', tableSearchBehindSet);\n    refreshElement.addEventListener('click', refreshAction);\n\n    $.when(\n        UserPreference.getUserPreference('local_assessfreq_student_search_table_hoursahead_preference')\n        .then((response) => {\n            hoursAhead = response.preferences[0].value ? response.preferences[0].value : 4;\n        })\n        .fail(() => {\n            Notification.exception(new Error('Failed to get use preference: hoursahead'));\n        }),\n        UserPreference.getUserPreference('local_assessfreq_student_search_table_hoursbehind_preference')\n        .then((response) => {\n            hoursBehind = response.preferences[0].value ? response.preferences[0].value : 1;\n        })\n        .fail(() => {\n            Notification.exception(new Error('Failed to get use preference: hoursahead'));\n        })\n    ).done(function () {\n        TableHandler.getTable(0, [hoursAhead, hoursBehind], null);\n        OverrideModal.init(context, TableHandler.getTable, [hoursAhead, hoursBehind]);\n    });\n};\n"],"names":["contextid","counterid","hoursAhead","hoursBehind","refreshPeriod","refreshCounter","reset","progressElement","document","getElementById","clearInterval","setAttribute","setInterval","progressWidthAria","getAttribute","progressStep","TableHandler","getTable","tableSearchAheadSet","event","preventDefault","target","tagName","toLowerCase","hours","dataset","metric","UserPreference","setUserPreference","then","fail","exception","Error","tableSearchBehindSet","refreshAction","element","closest","id","period","context","init","tableSearchInputElement","tableSearchResetElement","tableSearchRowsElement","tableSearchAheadElement","tableSearchBehindElement","refreshElement","addEventListener","tableSearch","tableSearchReset","tableSearchRowSet","when","getUserPreference","response","preferences","value","done"],"mappings":"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"}