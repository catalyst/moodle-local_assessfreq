{"version":3,"file":"dashboard_quiz_inprogress.min.js","sources":["../src/dashboard_quiz_inprogress.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript for quizzes in progress display and processing.\n *\n * @module     local_assessfreq/dashboard_quiz_inprogress\n * @package    local_assessfreq\n * @copyright  2020 Matt Porritt <mattp@catalyst-au.net>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from 'core/ajax';\nimport Notification from 'core/notification';\nimport Templates from 'core/templates';\nimport * as ChartData from 'local_assessfreq/chart_data';\nimport * as TableHandler from 'local_assessfreq/table_handler';\nimport * as UserPreference from 'local_assessfreq/user_preferences';\nimport * as ZoomModal from 'local_assessfreq/zoom_modal';\n\n/**\n * Module level variables.\n */\nvar contextid;\nvar refreshPeriod = 60;\nvar counterid;\nvar tablesort = 'name_asc';\nvar hoursAhead = 0;\nvar hoursBehind = 0;\n\n/**\n * Hours filter array.\n *\n * @type {array} Title to display on modal.\n */\nvar hoursFilter;\n\nconst cards = [\n    {cardId: 'local-assessfreq-quiz-summary-upcomming-graph', call: 'upcomming_quizzes', aspect: true},\n    {cardId: 'local-assessfreq-quiz-summary-inprogress-graph', call: 'all_participants_inprogress', aspect: true}\n];\n\n/**\n * Function for refreshing the counter.\n *\n * @param {boolean} reset the current count process.\n */\nconst refreshCounter = (reset = true) => {\n    let progressElement = document.getElementById('local-assessfreq-period-progress');\n\n    // Reset the current count process.\n    if (reset === true) {\n        clearInterval(counterid);\n        counterid = null;\n        progressElement.setAttribute('style', 'width: 100%');\n        progressElement.setAttribute('aria-valuenow', 100);\n    }\n\n    // Exit early if there is already a counter running.\n    if (counterid) {\n        return;\n    }\n\n    counterid = setInterval(() => {\n        let progressWidthAria = progressElement.getAttribute('aria-valuenow');\n        const progressStep = 100 / refreshPeriod;\n\n        if ((progressWidthAria - progressStep) > 0) {\n            progressElement.setAttribute('style', 'width: ' + (progressWidthAria - progressStep) + '%');\n            progressElement.setAttribute('aria-valuenow', (progressWidthAria - progressStep));\n        } else {\n            clearInterval(counterid);\n            counterid = null;\n            progressElement.setAttribute('style', 'width: 100%');\n            progressElement.setAttribute('aria-valuenow', 100);\n            processDashboard();\n            refreshCounter();\n        }\n    }, (1000));\n};\n\n/**\n * Starts the processing of the dashboard.\n */\nconst processDashboard = () => {\n    // Get summary quiz data.\n    Ajax.call([{\n        methodname: 'local_assessfreq_get_inprogress_counts',\n        args: {},\n    }])[0].then((response) => {\n        let quizSummary = JSON.parse(response);\n        let summaryElement = document.getElementById('local-assessfreq-quiz-dashboard-inprogress-summary-card');\n        let summarySpinner = summaryElement.getElementsByClassName('overlay-icon-container')[0];\n        let tableSearchInputElement = document.getElementById('local-assessfreq-quiz-inprogress-table-search');\n        let tableSearchResetElement = document.getElementById('local-assessfreq-quiz-inprogress-table-search-reset');\n        let tableSearchRowsElement = document.getElementById('local-assessfreq-quiz-inprogress-table-rows');\n        let tableSortElement = document.getElementById('local-assessfreq-inprogress-table-sort');\n\n        summaryElement.classList.remove('hide'); // Show the card.\n\n        // Populate summary card with details.\n        Templates.render('local_assessfreq/quiz-dashboard-inprogress-summary-card-content', quizSummary)\n        .done((html) => {\n            summarySpinner.classList.add('hide');\n\n            let contentcontainer = document.getElementById('local-assessfreq-quiz-dashboard-inprogress-summary-card-content');\n            Templates.replaceNodeContents(contentcontainer, html, '');\n        }).fail(() => {\n            Notification.exception(new Error('Failed to load quiz counts template.'));\n            return;\n        });\n\n        hoursFilter = [hoursAhead, hoursBehind];\n        ChartData.getCardCharts(0, hoursFilter);\n        TableHandler.getTable(0, hoursFilter, tablesort);\n        refreshCounter();\n\n        // Table event listeners.\n        tableSearchInputElement.addEventListener('keyup', TableHandler.tableSearch);\n        tableSearchInputElement.addEventListener('paste', TableHandler.tableSearch);\n        tableSearchResetElement.addEventListener('click', TableHandler.tableSearchReset);\n        tableSearchRowsElement.addEventListener('click', TableHandler.tableSearchRowSet);\n        tableSortElement.addEventListener('click', TableHandler.tableSortButtonAction);\n\n        return;\n    }).fail(() => {\n        Notification.exception(new Error('Failed to get quiz summary counts'));\n    });\n};\n\n/**\n * Handle processing of refresh and period button actions.\n *\n * @param {Event} event The triggered event for the element.\n */\nconst refreshAction = (event) => {\n    event.preventDefault();\n    var element = event.target;\n\n    if (element.closest('button') !== null && element.closest('button').id === 'local-assessfreq-refresh-quiz-dashboard') {\n        refreshCounter(true);\n        processDashboard();\n    } else if (element.tagName.toLowerCase() === 'a') {\n        refreshPeriod = element.dataset.period;\n        refreshCounter(true);\n        UserPreference.setUserPreference('local_assessfreq_quiz_refresh_preference', refreshPeriod);\n    }\n};\n\n/**\n * Trigger the zoom graph. Thin wrapper to add extra data to click event.\n *\n * @param {Event} event The triggered event for the element.\n */\nconst triggerZoomGraph = (event) => {\n    let call = event.target.closest('div').dataset.call;\n    let params = {'data': JSON.stringify({'call': call, 'hoursahead': hoursAhead, 'hoursbehind': hoursBehind})};\n    let method = 'get_quiz_inprogress_chart';\n\n    ZoomModal.zoomGraph(event, params, method);\n};\n\n/**\n * Process the hours ahead event from the in progress quizzes table.\n *\n * @param {Event} event The triggered event for the element.\n */\nconst quizzesAheadSet = (event) => {\n    event.preventDefault();\n    if (event.target.tagName.toLowerCase() === 'a') {\n        let hours = event.target.dataset.metric;\n        UserPreference.setUserPreference('local_assessfreq_quizzes_inprogress_table_hoursahead_preference', hours)\n            .then(() => {\n                hoursAhead = hours;\n                processDashboard(); // Reload the table.\n            })\n            .fail(() => {\n                Notification.exception(new Error('Failed to update user preference: hours ahead'));\n            });\n    }\n};\n\n/**\n * Process the hours behind event from the in progress quizzes table.\n *\n * @param {Event} event The triggered event for the element.\n */\nconst quizzesBehindSet = (event) => {\n    event.preventDefault();\n    if (event.target.tagName.toLowerCase() === 'a') {\n        let hours = event.target.dataset.metric;\n        UserPreference.setUserPreference('local_assessfreq_quizzes_inprogress_table_hoursbehind_preference', hours)\n            .then(() => {\n                hoursBehind = hours;\n                processDashboard(); // Reload the table.\n            })\n            .fail(() => {\n                Notification.exception(new Error('Failed to update user preference: hours behind'));\n            });\n    }\n};\n\n/**\n * Initialise method for quizzes in progress dashboard rendering.\n *\n * @param {int} context The context id.\n */\nexport const init = (context) => {\n    contextid = context;\n    ZoomModal.init(context); // Create the zoom modal.\n    TableHandler.init(\n        0,\n        contextid,\n        null,\n        'local-assessfreq-quiz-inprogress-table',\n        'get_quizzes_inprogress_table',\n        'local_assessfreq_quiz_table_inprogress_preference',\n        'local-assessfreq-quiz-inprogress-table-search'\n    );\n    ChartData.init(cards, context, 'get_quiz_inprogress_chart', 'local_assessfreq/chart');\n\n    UserPreference.getUserPreference('local_assessfreq_quiz_refresh_preference')\n    .then((response) => {\n        refreshPeriod = response.preferences[0].value ? response.preferences[0].value : 60;\n    })\n    .fail(() => {\n        Notification.exception(new Error('Failed to get use preference: refresh'));\n    });\n\n    UserPreference.getUserPreference('local_assessfreq_quiz_table_inprogress_sort_preference')\n    .then((response) => {\n        tablesort = response.preferences[0].value ? response.preferences[0].value : 'name_asc';\n    })\n    .fail(() => {\n        Notification.exception(new Error('Failed to get use preference: tablesort'));\n    });\n\n    UserPreference.getUserPreference('local_assessfreq_quizzes_inprogress_table_hoursahead_preference')\n        .then((response) => {\n            hoursAhead = response.preferences[0].value ? response.preferences[0].value : 0;\n        })\n        .fail(() => {\n            Notification.exception(new Error('Failed to get use preference: hoursahead'));\n        });\n\n    UserPreference.getUserPreference('local_assessfreq_quizzes_inprogress_table_hoursbehind_preference')\n        .then((response) => {\n            hoursBehind = response.preferences[0].value ? response.preferences[0].value : 0;\n        })\n        .fail(() => {\n            Notification.exception(new Error('Failed to get use preference: hoursbehind'));\n        });\n\n    // Event handling for refresh and period buttons.\n    let refreshElement = document.getElementById('local-assessfreq-period-container');\n    refreshElement.addEventListener('click', refreshAction);\n\n    // Set up zoom event listeners.\n    let summaryZoom = document.getElementById('local-assessfreq-quiz-summary-inprogress-graph-zoom');\n    summaryZoom.addEventListener('click', triggerZoomGraph);\n\n    let upcommingZoom = document.getElementById('local-assessfreq-quiz-summary-upcomming-graph-zoom');\n    upcommingZoom.addEventListener('click', triggerZoomGraph);\n\n    // Set up behind and ahead quizzes event listeners.\n    let quizzesAheadElement = document.getElementById('local-assessfreq-quiz-student-table-hoursahead');\n    quizzesAheadElement.addEventListener('click', quizzesAheadSet);\n\n    let quizzesBehindElement = document.getElementById('local-assessfreq-quiz-student-table-hoursbehind');\n    quizzesBehindElement.addEventListener('click', quizzesBehindSet);\n\n    processDashboard();\n\n};\n"],"names":["contextid","counterid","hoursFilter","refreshPeriod","tablesort","hoursAhead","hoursBehind","cards","cardId","call","aspect","refreshCounter","reset","progressElement","document","getElementById","clearInterval","setAttribute","setInterval","progressWidthAria","getAttribute","progressStep","processDashboard","methodname","args","then","response","quizSummary","JSON","parse","summaryElement","summarySpinner","getElementsByClassName","tableSearchInputElement","tableSearchResetElement","tableSearchRowsElement","tableSortElement","classList","remove","render","done","html","add","contentcontainer","replaceNodeContents","fail","exception","Error","ChartData","getCardCharts","TableHandler","getTable","addEventListener","tableSearch","tableSearchReset","tableSearchRowSet","tableSortButtonAction","refreshAction","event","preventDefault","element","target","closest","id","tagName","toLowerCase","dataset","period","UserPreference","setUserPreference","triggerZoomGraph","params","stringify","ZoomModal","zoomGraph","quizzesAheadSet","hours","metric","quizzesBehindSet","context","init","getUserPreference","preferences","value"],"mappings":";;;;;;;;SAmCIA,qaAEAC,UAUAC,YAXAC,cAAgB,GAEhBC,UAAY,WACZC,WAAa,EACbC,YAAc,QASZC,MAAQ,CACV,CAACC,OAAQ,gDAAiDC,KAAM,oBAAqBC,QAAQ,GAC7F,CAACF,OAAQ,iDAAkDC,KAAM,8BAA+BC,QAAQ,IAQtGC,eAAiB,eAACC,iEAChBC,gBAAkBC,SAASC,eAAe,qCAGhC,IAAVH,QACAI,cAAcf,WACdA,UAAY,KACZY,gBAAgBI,aAAa,QAAS,eACtCJ,gBAAgBI,aAAa,gBAAiB,MAI9ChB,YAIJA,UAAYiB,aAAY,SAChBC,kBAAoBN,gBAAgBO,aAAa,uBAC/CC,aAAe,IAAMlB,cAEtBgB,kBAAoBE,aAAgB,GACrCR,gBAAgBI,aAAa,QAAS,WAAaE,kBAAoBE,cAAgB,KACvFR,gBAAgBI,aAAa,gBAAkBE,kBAAoBE,gBAEnEL,cAAcf,WACdA,UAAY,KACZY,gBAAgBI,aAAa,QAAS,eACtCJ,gBAAgBI,aAAa,gBAAiB,KAC9CK,mBACAX,oBAEJ,OAMFW,iBAAmB,mBAEhBb,KAAK,CAAC,CACPc,WAAY,yCACZC,KAAM,MACN,GAAGC,MAAMC,eACLC,YAAcC,KAAKC,MAAMH,UACzBI,eAAiBhB,SAASC,eAAe,2DACzCgB,eAAiBD,eAAeE,uBAAuB,0BAA0B,GACjFC,wBAA0BnB,SAASC,eAAe,iDAClDmB,wBAA0BpB,SAASC,eAAe,uDAClDoB,uBAAyBrB,SAASC,eAAe,+CACjDqB,iBAAmBtB,SAASC,eAAe,0CAE/Ce,eAAeO,UAAUC,OAAO,2BAGtBC,OAAO,kEAAmEZ,aACnFa,MAAMC,OACHV,eAAeM,UAAUK,IAAI,YAEzBC,iBAAmB7B,SAASC,eAAe,sFACrC6B,oBAAoBD,iBAAkBF,KAAM,OACvDI,MAAK,2BACSC,UAAU,IAAIC,MAAM,4CAIrC7C,YAAc,CAACG,WAAYC,aAC3B0C,UAAUC,cAAc,EAAG/C,aAC3BgD,aAAaC,SAAS,EAAGjD,YAAaE,WACtCO,iBAGAsB,wBAAwBmB,iBAAiB,QAASF,aAAaG,aAC/DpB,wBAAwBmB,iBAAiB,QAASF,aAAaG,aAC/DnB,wBAAwBkB,iBAAiB,QAASF,aAAaI,kBAC/DnB,uBAAuBiB,iBAAiB,QAASF,aAAaK,mBAC9DnB,iBAAiBgB,iBAAiB,QAASF,aAAaM,0BAGzDX,MAAK,2BACSC,UAAU,IAAIC,MAAM,0CASnCU,cAAiBC,QACnBA,MAAMC,qBACFC,QAAUF,MAAMG,OAEc,OAA9BD,QAAQE,QAAQ,WAAuD,4CAAjCF,QAAQE,QAAQ,UAAUC,IAChEpD,gBAAe,GACfW,oBACyC,MAAlCsC,QAAQI,QAAQC,gBACvB9D,cAAgByD,QAAQM,QAAQC,OAChCxD,gBAAe,GACfyD,eAAeC,kBAAkB,2CAA4ClE,iBAS/EmE,iBAAoBZ,YAClBjD,KAAOiD,MAAMG,OAAOC,QAAQ,OAAOI,QAAQzD,KAC3C8D,OAAS,MAAS3C,KAAK4C,UAAU,MAAS/D,gBAAoBJ,uBAA2BC,eAG7FmE,UAAUC,UAAUhB,MAAOa,OAFd,8BAUXI,gBAAmBjB,WACrBA,MAAMC,iBACqC,MAAvCD,MAAMG,OAAOG,QAAQC,cAAuB,KACxCW,MAAQlB,MAAMG,OAAOK,QAAQW,OACjCT,eAAeC,kBAAkB,kEAAmEO,OAC/FnD,MAAK,KACFpB,WAAauE,MACbtD,sBAEHuB,MAAK,2BACWC,UAAU,IAAIC,MAAM,uDAU3C+B,iBAAoBpB,WACtBA,MAAMC,iBACqC,MAAvCD,MAAMG,OAAOG,QAAQC,cAAuB,KACxCW,MAAQlB,MAAMG,OAAOK,QAAQW,OACjCT,eAAeC,kBAAkB,mEAAoEO,OAChGnD,MAAK,KACFnB,YAAcsE,MACdtD,sBAEHuB,MAAK,2BACWC,UAAU,IAAIC,MAAM,sEAU5BgC,UACjB/E,UAAY+E,QACZN,UAAUO,KAAKD,SACf7B,aAAa8B,KACT,EACAhF,UACA,KACA,yCACA,+BACA,oDACA,iDAEJgD,UAAUgC,KAAKzE,MAAOwE,QAAS,4BAA6B,0BAE5DX,eAAea,kBAAkB,4CAChCxD,MAAMC,WACHvB,cAAgBuB,SAASwD,YAAY,GAAGC,MAAQzD,SAASwD,YAAY,GAAGC,MAAQ,MAEnFtC,MAAK,2BACWC,UAAU,IAAIC,MAAM,6CAGrCqB,eAAea,kBAAkB,0DAChCxD,MAAMC,WACHtB,UAAYsB,SAASwD,YAAY,GAAGC,MAAQzD,SAASwD,YAAY,GAAGC,MAAQ,cAE/EtC,MAAK,2BACWC,UAAU,IAAIC,MAAM,+CAGrCqB,eAAea,kBAAkB,mEAC5BxD,MAAMC,WACHrB,WAAaqB,SAASwD,YAAY,GAAGC,MAAQzD,SAASwD,YAAY,GAAGC,MAAQ,KAEhFtC,MAAK,2BACWC,UAAU,IAAIC,MAAM,gDAGzCqB,eAAea,kBAAkB,oEAC5BxD,MAAMC,WACHpB,YAAcoB,SAASwD,YAAY,GAAGC,MAAQzD,SAASwD,YAAY,GAAGC,MAAQ,KAEjFtC,MAAK,2BACWC,UAAU,IAAIC,MAAM,iDAIpBjC,SAASC,eAAe,qCAC9BqC,iBAAiB,QAASK,eAGvB3C,SAASC,eAAe,uDAC9BqC,iBAAiB,QAASkB,kBAElBxD,SAASC,eAAe,sDAC9BqC,iBAAiB,QAASkB,kBAGdxD,SAASC,eAAe,kDAC9BqC,iBAAiB,QAASuB,iBAEnB7D,SAASC,eAAe,mDAC9BqC,iBAAiB,QAAS0B,kBAE/CxD"}