{"version":3,"file":"chart_output_chartjs.min.js","sources":["../src/chart_output_chartjs.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Chart output for chart.js with custom override for aspect config.\n *\n * @package    local_assessfreq\n * @copyright  2020 Matt Porritt <mattp@catalyst-au.net>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['core/chart_output_chartjs'], function (Output) {\n\n    /**\n     * Module level variables.\n     */\n    var ChartOutput = {};\n    var aspectRatio = false;\n    var rtLegendoptions = false;\n\n    /**\n     * Overrride the config.\n     *\n     * @protected\n     * @param {module:core/chart_axis} axis The axis.\n     * @return {Object} The axis config.\n     */\n    Output.prototype._makeConfig = function () {\n        var config = {\n            type: this._getChartType(),\n            data: {\n                labels: this._cleanData(this._chart.getLabels()),\n                datasets: this._makeDatasetsConfig()\n            },\n            options: {\n                title: {\n                    display: this._chart.getTitle() !== null,\n                    text: this._cleanData(this._chart.getTitle())\n                }\n            }\n        };\n        var legendOptions = this._chart.getLegendOptions();\n        if (legendOptions) {\n            config.options.legend = legendOptions;\n        }\n\n        // Override legend options with those provided at run time.\n        if (rtLegendoptions) {\n            config.options.legend = rtLegendoptions;\n        }\n\n        this._chart.getXAxes().forEach(function (axis, i) {\n            var axisLabels = axis.getLabels();\n\n            config.options.scales = config.options.scales || {};\n            config.options.scales.xAxes = config.options.scales.xAxes || [];\n            config.options.scales.xAxes[i] = this._makeAxisConfig(axis, 'x', i);\n\n            if (axisLabels !== null) {\n                config.options.scales.xAxes[i].ticks.callback = function (value, index) {\n                    return axisLabels[index] || '';\n                };\n            }\n            config.options.scales.xAxes[i].stacked = this._isStacked();\n        }.bind(this));\n\n        this._chart.getYAxes().forEach(function (axis, i) {\n            var axisLabels = axis.getLabels();\n\n            config.options.scales = config.options.scales || {};\n            config.options.scales.yAxes = config.options.scales.yAxes || [];\n            config.options.scales.yAxes[i] = this._makeAxisConfig(axis, 'y', i);\n\n            if (axisLabels !== null) {\n                config.options.scales.yAxes[i].ticks.callback = function (value) {\n                    return axisLabels[parseInt(value, 10)] || '';\n                };\n            }\n            config.options.scales.yAxes[i].stacked = this._isStacked();\n        }.bind(this));\n\n        config.options.tooltips = {\n            callbacks: {\n                label: this._makeTooltip.bind(this)\n            }\n        };\n\n        config.options.maintainAspectRatio = aspectRatio;\n\n        return config;\n    };\n\n    /**\n     * Get the aspect ratio setting and initialise the chart.\n     */\n    ChartOutput.init = function (chartImage, ChartInst, aspect, legend) {\n        aspectRatio = aspect;\n        rtLegendoptions = legend;\n        new Output(chartImage, ChartInst);\n    };\n\n    return ChartOutput;\n\n});\n"],"names":["define","Output","ChartOutput","aspectRatio","rtLegendoptions","prototype","_makeConfig","config","type","this","_getChartType","data","labels","_cleanData","_chart","getLabels","datasets","_makeDatasetsConfig","options","title","display","getTitle","text","legendOptions","getLegendOptions","legend","getXAxes","forEach","axis","i","axisLabels","scales","xAxes","_makeAxisConfig","ticks","callback","value","index","stacked","_isStacked","bind","getYAxes","yAxes","parseInt","tooltips","callbacks","label","_makeTooltip","maintainAspectRatio","init","chartImage","ChartInst","aspect"],"mappings":";;;;;;;AAsBAA,+CAAO,CAAC,8BAA8B,SAAUC,YAKxCC,YAAc,GACdC,aAAc,EACdC,iBAAkB,SAStBH,OAAOI,UAAUC,YAAc,eACvBC,OAAS,CACTC,KAAMC,KAAKC,gBACXC,KAAM,CACFC,OAAQH,KAAKI,WAAWJ,KAAKK,OAAOC,aACpCC,SAAUP,KAAKQ,uBAEnBC,QAAS,CACLC,MAAO,CACHC,QAAoC,OAA3BX,KAAKK,OAAOO,WACrBC,KAAMb,KAAKI,WAAWJ,KAAKK,OAAOO,eAI1CE,cAAgBd,KAAKK,OAAOU,0BAC5BD,gBACAhB,OAAOW,QAAQO,OAASF,eAIxBnB,kBACAG,OAAOW,QAAQO,OAASrB,sBAGvBU,OAAOY,WAAWC,QAAQ,SAAUC,KAAMC,OACvCC,WAAaF,KAAKb,YAEtBR,OAAOW,QAAQa,OAASxB,OAAOW,QAAQa,QAAU,GACjDxB,OAAOW,QAAQa,OAAOC,MAAQzB,OAAOW,QAAQa,OAAOC,OAAS,GAC7DzB,OAAOW,QAAQa,OAAOC,MAAMH,GAAKpB,KAAKwB,gBAAgBL,KAAM,IAAKC,GAE9C,OAAfC,aACAvB,OAAOW,QAAQa,OAAOC,MAAMH,GAAGK,MAAMC,SAAW,SAAUC,MAAOC,cACtDP,WAAWO,QAAU,KAGpC9B,OAAOW,QAAQa,OAAOC,MAAMH,GAAGS,QAAU7B,KAAK8B,cAChDC,KAAK/B,YAEFK,OAAO2B,WAAWd,QAAQ,SAAUC,KAAMC,OACvCC,WAAaF,KAAKb,YAEtBR,OAAOW,QAAQa,OAASxB,OAAOW,QAAQa,QAAU,GACjDxB,OAAOW,QAAQa,OAAOW,MAAQnC,OAAOW,QAAQa,OAAOW,OAAS,GAC7DnC,OAAOW,QAAQa,OAAOW,MAAMb,GAAKpB,KAAKwB,gBAAgBL,KAAM,IAAKC,GAE9C,OAAfC,aACAvB,OAAOW,QAAQa,OAAOW,MAAMb,GAAGK,MAAMC,SAAW,SAAUC,cAC/CN,WAAWa,SAASP,MAAO,MAAQ,KAGlD7B,OAAOW,QAAQa,OAAOW,MAAMb,GAAGS,QAAU7B,KAAK8B,cAChDC,KAAK/B,OAEPF,OAAOW,QAAQ0B,SAAW,CACtBC,UAAW,CACPC,MAAOrC,KAAKsC,aAAaP,KAAK/B,QAItCF,OAAOW,QAAQ8B,oBAAsB7C,YAE9BI,QAMXL,YAAY+C,KAAO,SAAUC,WAAYC,UAAWC,OAAQ3B,QACxDtB,YAAciD,OACdhD,gBAAkBqB,WACdxB,OAAOiD,WAAYC,YAGpBjD"}