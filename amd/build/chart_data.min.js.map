{"version":3,"file":"chart_data.min.js","sources":["../src/chart_data.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Chart data JS module.\n *\n * @module     local_assessfreq/char_data\n * @package    local_assessfreq\n * @copyright  2020 Guillermo Gomez <guillermogomez@catalyst-au.net>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Fragment from 'core/fragment';\nimport Notification from 'core/notification';\nimport * as Str from 'core/str';\nimport Templates from 'core/templates';\n\n/**\n * Module level variables.\n */\nlet cards;\nlet contextId;\nlet fragment;\nlet template;\n\n/**\n * For each of the cards on the dashboard get their corresponding chart data.\n * Data is based on the year variable from the corresponding dropdown.\n * Chart data is loaded via ajax.\n *\n * @param {int|null} quizId The quiz Id.\n * @param {array|null} hoursFilter Array with hour ahead or behind preference.\n * @param {int|null} yearSelect Year selected.\n */\nexport const getCardCharts = (quizId, hoursFilter, yearSelect) => {\n    cards.forEach((cardData) => {\n        let cardElement = document.getElementById(cardData.cardId);\n        let spinner = cardElement.getElementsByClassName('overlay-icon-container')[0];\n        let chartBody = cardElement.getElementsByClassName('chart-body')[0];\n        let values = {'call': cardData.call};\n        // Add values to Object depending on dashboard type.\n        if (hoursFilter) {\n            values.hoursahead = hoursFilter[0];\n            values.hoursbehind = hoursFilter[1];\n        }\n        if (quizId) {\n            values.quiz = quizId;\n        }\n        if (yearSelect) {\n            values.year = yearSelect;\n        }\n        let params = {'data': JSON.stringify(values)};\n\n        spinner.classList.remove('hide'); // Show sinner if not already shown.\n        Fragment.loadFragment('local_assessfreq', fragment, contextId, params)\n            .done((response) => {\n                let resObj = JSON.parse(response);\n                if (resObj.hasdata === true) {\n                    let context = {\n                        'withtable': true, 'chartdata': JSON.stringify(resObj.chart)\n                    };\n                    if (typeof cardData.aspect !== 'undefined') {\n                        context.aspect = cardData.aspect;\n                    }\n                    Templates.render(template, context).done((html, js) => {\n                        spinner.classList.add('hide'); // Hide spinner if not already hidden.\n                        // Load card body.\n                        Templates.replaceNodeContents(chartBody, html, js);\n                    }).fail(() => {\n                        Notification.exception(new Error('Failed to load chart template.'));\n                        return;\n                    });\n                    return;\n                } else {\n                    Str.get_string('nodata', 'local_assessfreq').then((str) => {\n                        const noDatastr = document.createElement('h3');\n                        noDatastr.innerHTML = str;\n                        chartBody.innerHTML = noDatastr.outerHTML;\n                        spinner.classList.add('hide'); // Hide spinner if not already hidden.\n                        return;\n                    });\n                }\n            }).fail(() => {\n                Notification.exception(new Error('Failed to load card.'));\n                return;\n            });\n    });\n};\n\n/**\n * Initialise method for table handler.\n *\n * @param {array} cardsArray Cards array.\n * @param {int} contextIdChart The context id.\n * @param {string} fragmentChart Fragment name.\n * @param {string} templateChart Template name.\n */\nexport const init = (cardsArray, contextIdChart, fragmentChart, templateChart) => {\n    cards = cardsArray;\n    contextId = contextIdChart;\n    fragment = fragmentChart;\n    template = templateChart;\n};\n"],"names":["cards","contextId","fragment","template","quizId","hoursFilter","yearSelect","forEach","cardData","cardElement","document","getElementById","cardId","spinner","getElementsByClassName","chartBody","values","call","hoursahead","hoursbehind","quiz","year","params","JSON","stringify","classList","remove","loadFragment","done","response","resObj","parse","hasdata","context","chart","aspect","render","html","js","add","replaceNodeContents","fail","exception","Error","Str","get_string","then","str","noDatastr","createElement","innerHTML","outerHTML","cardsArray","contextIdChart","fragmentChart","templateChart"],"mappings":";;;;;;;;SAgCIA,MACAC,UACAC,SACAC,w6BAWyB,CAACC,OAAQC,YAAaC,cAC/CN,MAAMO,SAASC,eACPC,YAAcC,SAASC,eAAeH,SAASI,QAC/CC,QAAUJ,YAAYK,uBAAuB,0BAA0B,GACvEC,UAAYN,YAAYK,uBAAuB,cAAc,GAC7DE,OAAS,MAASR,SAASS,MAE3BZ,cACAW,OAAOE,WAAab,YAAY,GAChCW,OAAOG,YAAcd,YAAY,IAEjCD,SACAY,OAAOI,KAAOhB,QAEdE,aACAU,OAAOK,KAAOf,gBAEdgB,OAAS,MAASC,KAAKC,UAAUR,SAErCH,QAAQY,UAAUC,OAAO,0BAChBC,aAAa,mBAAoBzB,SAAUD,UAAWqB,QAC1DM,MAAMC,eACCC,OAASP,KAAKQ,MAAMF,cACD,IAAnBC,OAAOE,QAAkB,KACrBC,QAAU,YACG,YAAmBV,KAAKC,UAAUM,OAAOI,oBAE3B,IAApB1B,SAAS2B,SAChBF,QAAQE,OAAS3B,SAAS2B,gCAEpBC,OAAOjC,SAAU8B,SAASL,MAAK,CAACS,KAAMC,MAC5CzB,QAAQY,UAAUc,IAAI,2BAEZC,oBAAoBzB,UAAWsB,KAAMC,OAChDG,MAAK,2BACSC,UAAU,IAAIC,MAAM,sCAKrCC,IAAIC,WAAW,SAAU,oBAAoBC,MAAMC,YACzCC,UAAYtC,SAASuC,cAAc,MACzCD,UAAUE,UAAYH,IACtBhC,UAAUmC,UAAYF,UAAUG,UAChCtC,QAAQY,UAAUc,IAAI,cAI/BE,MAAK,2BACSC,UAAU,IAAIC,MAAM,8CAc7B,CAACS,WAAYC,eAAgBC,cAAeC,iBAC5DvD,MAAQoD,WACRnD,UAAYoD,eACZnD,SAAWoD,cACXnD,SAAWoD"}