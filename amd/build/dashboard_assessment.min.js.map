{"version":3,"file":"dashboard_assessment.min.js","sources":["../src/dashboard_assessment.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript for report card display and processing.\n *\n * @module     local_assessfreq/dashboard_assessment\n * @package    local_assessfreq\n * @copyright  2020 Matt Porritt <mattp@catalyst-au.net>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Notification from 'core/notification';\nimport Calendar from 'local_assessfreq/calendar';\nimport * as ChartData from 'local_assessfreq/chart_data';\nimport Dayview from 'local_assessfreq/dayview';\nimport * as UserPreference from 'local_assessfreq/user_preferences';\nimport ZoomModal from 'local_assessfreq/zoom_modal';\n\n/**\n * Module level variables.\n */\nvar contextid;\nvar yearselect;\nvar yearselectheatmap;\nvar metricselectheatmap;\nvar timeout;\nvar modulesJson = '';\nvar heatmapOptionsJson = '';\n\nconst cards = [\n    {cardId: 'local-assessfreq-assess-due-month', call: 'assess_by_month'},\n    {cardId: 'local-assessfreq-assess-by-activity', call: 'assess_by_activity'},\n    {cardId: 'local-assessfreq-assess-due-month-student', call: 'assess_by_month_student'}\n];\n\n/**\n * Get and process the selected year from the dropdown,\n * and update the corresponding user perference.\n *\n * @param {event} event The triggered event for the element.\n */\nconst yearButtonAction = (event) => {\n    event.preventDefault();\n    var element = event.target;\n\n    if (element.tagName.toLowerCase() === 'a' && element.dataset.year !== yearselect) { // Only act on certain elements.\n        yearselect = element.dataset.year;\n\n        // Save selection as a user preference.\n        UserPreference.setUserPreference('local_assessfreq_overview_year_preference', yearselect);\n\n        // Update card data based on selected year.\n        var yeartitle = document.getElementById('local-assessfreq-report-overview')\n            .getElementsByClassName('local-assessfreq-year')[0];\n        yeartitle.innerHTML = yearselect;\n\n        ChartData.getCardCharts(0, null, yearselect); // Process loading for the assessment cards.\n    }\n};\n\n/**\n * Quick and dirty debounce method for the heatmap settings menu.\n * This stops the ajax method that updates the heatmap from being updated\n * while the user is still checking options.\n *\n */\nconst updateHeatmapDebounce = () => {\n    clearTimeout(timeout);\n    timeout = setTimeout(updateHeatmap(), 750);\n};\n\n/**\n * Display heatmap calendar.\n *\n * @param {event} event The triggered event for the element.\n */\nconst detailView = (event) => {\n    let element = event.target;\n    if (element.tagName.toLowerCase() === 'td' && element.dataset.event === 'true') { // Only act on certain elements.\n        Dayview.display(element.dataset.date);\n    }\n};\n\n/**\n * Start heatmap generation.\n *\n */\nconst generateHeatmap = () => {\n    let heatmapOptions = JSON.parse(heatmapOptionsJson);\n    let year = parseInt(heatmapOptions.year);\n    let metric = heatmapOptions.metric;\n    let modules = heatmapOptions.modules;\n    let heatmapContainer = document.getElementById('local-assessfreq-report-heatmap');\n    let spinner = heatmapContainer.getElementsByClassName('overlay-icon-container')[0];\n\n    spinner.classList.remove('hide'); // Show spinner if not already shown.\n\n    Calendar.generate(year, 0, 11, metric, modules)\n    .then(calendar => {\n        let calendarContainer = document.getElementById('local-assessfreq-report-heatmap-months');\n        calendarContainer.innerHTML = calendar.innerHTML;\n        calendarContainer.addEventListener('click', detailView);\n    })\n    .then(Calendar.createHeatScale)\n    .then((heatScale) => {\n        let heatScaleContainer = document.getElementById('local-assessfreq-report-heatmap-scale');\n        heatScaleContainer.innerHTML = heatScale.outerHTML;\n        spinner.classList.add('hide'); // Hide sinner if not already hidden.\n    })\n    .catch(() => {\n        Notification.exception(new Error('Failed to calendar.'));\n        return;\n    });\n};\n\nconst updateDownload = ({year, metric, modules}) => {\n    let downloadForm = document.getElementById('local-assessfreq-heatmap-form');\n    let formElements = downloadForm.elements;\n    let toRemove = new Array();\n\n    if (modules.length === 0) {\n        modules = ['all'];\n    }\n\n    for (let i = 0; i < formElements.length; i++) {\n        if (formElements[i] === undefined) {\n            continue;\n        }\n        // Update year field.\n        if ((formElements[i].type === 'hidden') && (formElements[i].name === 'year')) {\n            formElements[i].value = year;\n            continue;\n        }\n\n        // Update metric field.\n        if ((formElements[i].type === 'hidden') && (formElements[i].name === 'metric')) {\n            formElements[i].value = metric;\n            continue;\n        }\n\n        // Update module fields.\n        if ((formElements[i].type === 'hidden') && (formElements[i].name.startsWith('modules'))) {\n            toRemove.push(formElements[i]);\n            continue;\n        }\n    }\n\n    for (const element of toRemove) {\n        element.remove();\n    }\n\n    for (let i = 0; i < modules.length; i++) {\n        let input = document.createElement('input');\n        input.type = 'hidden';\n        input.name = 'modules[' + modules[i] + ']';\n        input.value = modules[i];\n\n        downloadForm.appendChild(input);\n    }\n};\n\n/**\n * Update the heatmap based on the current filter settings.\n *\n */\nconst updateHeatmap = () => {\n    // Get current state of select menu items.\n    var cardsModulesSelectHeatmapElement = document.getElementById('local-assessfreq-heatmap-modules');\n    var links = cardsModulesSelectHeatmapElement.getElementsByTagName('a');\n    var modules = [];\n\n    for (var i = 0; i < links.length; i++) {\n        if (links[i].classList.contains('active')) {\n            let module = links[i].dataset.module;\n            modules.push(module);\n        }\n    }\n\n    // Save selection as a user preference.\n    if (modulesJson !== JSON.stringify(modules)) {\n        modulesJson = JSON.stringify(modules);\n        UserPreference.setUserPreference('local_assessfreq_heatmap_modules_preference', modulesJson);\n    }\n\n    // Build settings object.\n    var optionsObj = {\n        'year': yearselectheatmap,\n        'metric': metricselectheatmap,\n        'modules': modules\n    };\n\n    var optionsJson = JSON.stringify(optionsObj);\n\n    if (optionsJson !== heatmapOptionsJson) { // Compare to global to see if there are any changes.\n        // If list has changed fetch heatmap and update user preference.\n        heatmapOptionsJson = optionsJson;\n        generateHeatmap();\n\n        // Update the download options.\n        updateDownload(optionsObj);\n    }\n};\n\n/**\n * Get and process the selected year from the dropdown for the heatmap display,\n * and update the corresponding user preference.\n *\n * @param {event} event The triggered event for the element.\n */\nconst yearHeatmapButtonAction = (event) => {\n    event.preventDefault();\n    var element = event.target;\n\n    if (element.tagName.toLowerCase() === 'a' && element.dataset.year !== yearselectheatmap) { // Only act on certain elements.\n        yearselectheatmap = element.dataset.year;\n\n        // Save selection as a user preference.\n        UserPreference.setUserPreference('local_assessfreq_heatmap_year_preference', yearselectheatmap);\n\n        // Update card data based on selected year.\n        var yeartitle = document.getElementById('local-assessfreq-report-heatmap')\n            .getElementsByClassName('local-assessfreq-year')[0];\n        yeartitle.innerHTML = yearselectheatmap;\n\n        updateHeatmapDebounce(); // Call function to update heatmap.\n    }\n};\n\n/**\n * Get and process the selected assessment metric from the dropdown for the heatmap display,\n * and update the corresponding user preference.\n *\n * @param {event} event The triggered event for the element.\n */\nconst metricHeatmapButtonAction = (event) => {\n    event.preventDefault();\n    var element = event.target;\n\n    if (element.tagName.toLowerCase() === 'a' && element.dataset.metric !== metricselectheatmap) {\n        metricselectheatmap = element.dataset.metric;\n\n        // Save selection as a user preference.\n        UserPreference.setUserPreference('local_assessfreq_heatmap_metric_preference', metricselectheatmap);\n\n        updateHeatmapDebounce(); // Call function to update heatmap.\n    }\n};\n\n/**\n * Add the event listeners to the modules in the module select dropdown.\n *\n * @param {Object} element The dropdown HTML element that contains the list of modules as links.\n */\nconst moduleListChildrenEvents = (element) => {\n    var links = element.getElementsByTagName('a');\n    var all = links[0];\n\n    for (var i = 0; i < links.length; i++) {\n        let module = links[i].dataset.module;\n\n        if (module.toLowerCase() === 'all') {\n            links[i].addEventListener('click', function (event) {\n                event.preventDefault();\n                // Remove active class from all other links.\n                for (var j = 0; j < links.length; j++) {\n                    links[j].classList.remove('active');\n                }\n                updateHeatmapDebounce(); // Call function to update heatmap.\n            });\n        } else if (module.toLowerCase() === 'close') {\n            links[i].addEventListener('click', function (event) {\n                event.preventDefault();\n                event.stopPropagation();\n\n                var dropdownmenu = document.getElementById('local-assessfreq-heatmap-modules-filter');\n                dropdownmenu.classList.remove('show');\n\n                updateHeatmapDebounce(); // Call function to update heatmap.\n            });\n        } else {\n            links[i].addEventListener('click', function (event) {\n                event.preventDefault();\n                event.stopPropagation();\n\n                all.classList.remove('active');\n\n                event.target.classList.toggle('active');\n                updateHeatmapDebounce();\n            });\n        }\n    }\n};\n\n/**\n * Thin wrapper to add extra data to click event.\n *\n * @param {Event} event The triggered event for the element.\n */\nconst triggerZoomGraph = (event) => {\n    let call = event.target.closest('div').dataset.call;\n    let params = {'data': JSON.stringify({'year': yearselect, 'call': call})};\n    let method = 'get_chart';\n\n    ZoomModal.zoomGraph(event, params, method);\n};\n\n/**\n * Initialise method for report card rendering.\n *\n * @param {integer} context The current context id.\n */\nexport const init = (context) => {\n    contextid = context;\n\n    // Set up event listener and related actions for year dropdown on report cards.\n    let cardsYearSelectElement = document.getElementById('local-assessfreq-cards-year');\n    yearselect = cardsYearSelectElement.getElementsByClassName('active')[0].dataset.year;\n    cardsYearSelectElement.addEventListener('click', yearButtonAction);\n\n    // Set up event listener and related actions for year dropdown on heatmp.\n    let cardsYearSelectHeatmapElement = document.getElementById('local-assessfreq-heatmap-year');\n    yearselectheatmap = cardsYearSelectHeatmapElement.getElementsByClassName('active')[0].dataset.year;\n    cardsYearSelectHeatmapElement.addEventListener('click', yearHeatmapButtonAction);\n\n    // Set up event listener and related actions for metric dropdown on heatmp.\n    let cardsMetricSelectHeatmapElement = document.getElementById('local-assessfreq-heatmap-metrics');\n    metricselectheatmap = cardsMetricSelectHeatmapElement.getElementsByClassName('active')[0].dataset.metric;\n    cardsMetricSelectHeatmapElement.addEventListener('click', metricHeatmapButtonAction);\n\n    // Set up event listener and related actions for module dropdown on heatmp.\n    let cardsModulesSelectHeatmapElement = document.getElementById('local-assessfreq-heatmap-modules');\n    moduleListChildrenEvents(cardsModulesSelectHeatmapElement);\n\n    // Set up zoom event listeners.\n    let dueMonthZoom = document.getElementById('local-assessfreq-assess-due-month-zoom');\n    dueMonthZoom.addEventListener('click', triggerZoomGraph);\n\n    let dueActivityZoom = document.getElementById('local-assessfreq-assess-by-activity-zoom');\n    dueActivityZoom.addEventListener('click', triggerZoomGraph);\n\n    let dueStudentZoom = document.getElementById('local-assessfreq-assess-due-month-student-zoom');\n    dueStudentZoom.addEventListener('click', triggerZoomGraph);\n\n    // Create the zoom modal.\n    ZoomModal.init(context);\n\n    // Setup the dayview modal.\n    Dayview.init();\n\n    // Setup the chart data for each card.\n    ChartData.init(cards, contextid, 'get_chart', 'core/chart');\n\n    // Process loading for the assessment cards.\n    ChartData.getCardCharts(0, null, yearselect);\n\n    // Get the data for the heatmap.\n    updateHeatmap();\n\n};\n"],"names":["contextid","yearselect","yearselectheatmap","metricselectheatmap","timeout","modulesJson","heatmapOptionsJson","cards","cardId","call","yearButtonAction","event","preventDefault","element","target","tagName","toLowerCase","dataset","year","UserPreference","setUserPreference","document","getElementById","getElementsByClassName","innerHTML","ChartData","getCardCharts","updateHeatmapDebounce","clearTimeout","setTimeout","updateHeatmap","detailView","display","date","links","getElementsByTagName","modules","i","length","classList","contains","module","push","JSON","stringify","optionsObj","optionsJson","heatmapOptions","parse","parseInt","metric","spinner","remove","generate","then","calendar","calendarContainer","addEventListener","Calendar","createHeatScale","heatScale","outerHTML","add","catch","exception","Error","generateHeatmap","_ref","downloadForm","formElements","elements","toRemove","Array","undefined","type","name","startsWith","value","input","createElement","appendChild","updateDownload","yearHeatmapButtonAction","metricHeatmapButtonAction","triggerZoomGraph","closest","params","zoomGraph","context","cardsYearSelectElement","cardsYearSelectHeatmapElement","cardsMetricSelectHeatmapElement","all","j","stopPropagation","toggle","moduleListChildrenEvents","init"],"mappings":"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"}