{"version":3,"file":"dayview.min.js","sources":["../src/dayview.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript for heatmap calendar generation and display.\n *\n * @package    local_assessfreq\n * @copyright  2020 Matt Porritt <mattp@catalyst-au.net>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(\n    ['core/str', 'core/notification', 'core/modal_factory', 'local_assessfreq/modal_large', 'core/templates', 'core/ajax'],\n    function (Str, Notification, ModalFactory, ModalLarge, Templates, Ajax) {\n\n        /**\n         * Module level variables.\n         */\n        var Dayview = {};\n        var modalObj;\n        const spinner = '<p class=\"text-center\">'\n            + '<i class=\"fa fa-circle-o-notch fa-spin fa-3x fa-fw\"></i>'\n            + '</p>';\n\n        const stringArr = [\n            {key: 'sun', component: 'calendar'},\n            {key: 'mon', component: 'calendar'},\n            {key: 'tue', component: 'calendar'},\n            {key: 'wed', component: 'calendar'},\n            {key: 'thu', component: 'calendar'},\n            {key: 'fri', component: 'calendar'},\n            {key: 'sat', component: 'calendar'},\n            {key: 'jan', component: 'local_assessfreq'},\n            {key: 'feb', component: 'local_assessfreq'},\n            {key: 'mar', component: 'local_assessfreq'},\n            {key: 'apr', component: 'local_assessfreq'},\n            {key: 'may', component: 'local_assessfreq'},\n            {key: 'jun', component: 'local_assessfreq'},\n            {key: 'jul', component: 'local_assessfreq'},\n            {key: 'aug', component: 'local_assessfreq'},\n            {key: 'sep', component: 'local_assessfreq'},\n            {key: 'oct', component: 'local_assessfreq'},\n            {key: 'nov', component: 'local_assessfreq'},\n            {key: 'dec', component: 'local_assessfreq'},\n        ];\n        var stringResult;\n        var systemTimezone = 'Australia/Melbourne';\n        var dayViewTitle = '';\n\n        const getUserDate = function (timestamp, format) {\n            return new Promise((resolve) => {\n                const systemTimezoneTime = new Date(timestamp * 1000).toLocaleString('en-US', {timeZone: systemTimezone});\n                let date = new Date(systemTimezoneTime);\n                const year = date.getFullYear();\n                const month = stringResult[(7 + date.getMonth())];\n                const day = date.getDate();\n                const hours = date.getHours();\n                const minutes = '0' + date.getMinutes();\n\n                const strftimetime = hours + ':' + minutes.substr(-2); // Will display time in 10:30 format.\n                const strftimedatetime = day + ' ' + month + ' ' + year + ', ' + strftimetime;\n\n                if (format === 'strftimetime') {\n                    resolve(strftimetime);\n                } else {\n                    resolve(strftimedatetime);\n                }\n\n            });\n        };\n\n        const formatData = async function (response) {\n            let responseArr = JSON.parse(response);\n\n            // We are displaying the event as a bar whose width represents the start and end time of the event.\n            // We need to scale the width of the bar to match the width of the container. Therefore 100% width of the container\n            // equals 24 hours (one day).\n            // There are 1440 mins per day. 1440 mins equals 100%, therefore 1 min = (100/1440)%. 5/72 == 100/1440.\n            let scaler = 5 / 72;\n\n            for (let i = 0; i < responseArr.length; i++) {\n                const year = responseArr[i].endyear;\n                const month = (responseArr[i].endmonth) - 1; // Minus 1 for difference between months in PHP and JS.\n                const day = responseArr[i].endday;\n                const dayStart = (new Date(year, month, day).getTime()) / 1000;\n                const timeStart = new Date(responseArr[i].timestart * 1000).toLocaleString('en-US', {timeZone: systemTimezone});\n                const timeStartTimestamp = (new Date(timeStart).getTime()) / 1000;\n                const timeEnd = new Date(responseArr[i].timeend * 1000).toLocaleString('en-US', {timeZone: systemTimezone});\n                const timeEndTimestamp = (new Date(timeEnd).getTime()) / 1000;\n                let secondsSinceDayStart = timeStartTimestamp - dayStart;\n                let leftMargin = 0;\n                let width = 0;\n\n                if (secondsSinceDayStart <= 0) {\n                    secondsSinceDayStart = 0;\n                    width = ((timeEndTimestamp - dayStart) / 60) * scaler;\n                    responseArr[i].start = await getUserDate(responseArr[i].timestart, 'strftimedatetime');\n                } else {\n                    leftMargin = (secondsSinceDayStart / 60) * scaler;\n                    width = ((timeEndTimestamp - timeStartTimestamp) / 60) * scaler;\n                    responseArr[i].start = await getUserDate(responseArr[i].timestart, 'strftimetime');\n                }\n\n                if (leftMargin + width > 100) {\n                    width = 100 - leftMargin;\n                }\n\n                responseArr[i].leftmargin = leftMargin;\n                responseArr[i].width = width;\n                responseArr[i].end = await getUserDate(responseArr[i].timeend, 'strftimetime');\n            }\n\n            return new Promise((resolve) => {\n                resolve(responseArr);\n            });\n        };\n\n        /**\n         * Initialise the base modal to be used.\n         *\n         */\n        Dayview.display = function (date) {\n            modalObj.setBody(spinner);\n            modalObj.show();\n            let args = {\n                date: date,\n                modules: ['all']\n            };\n            let jsonArgs = JSON.stringify(args);\n            Ajax.call([{\n                methodname: 'local_assessfreq_get_day_events',\n                args: {jsondata: jsonArgs},\n            }])[0]\n            .then(formatData)\n            .then((responseArr) => {\n\n                let context = {rows: responseArr};\n                const year = responseArr[0].endyear;\n                const day = responseArr[0].endday;\n                const month = stringResult[(6 + parseInt(responseArr[0].endmonth))];\n                const dayDate = day + ' ' + month + ' ' + year;\n\n                modalObj.setTitle(dayViewTitle + ' ' + dayDate);\n                modalObj.setBody(Templates.render('local_assessfreq/dayview', context));\n\n            }).fail(() => {\n                Notification.exception(new Error('Failed to load day view'));\n            });\n        };\n\n        /**\n         * Initialise the base modal to be used.\n         *\n         * @param {integer} context The current context id.\n         */\n        Dayview.init = function () {\n            // Load the strings we'll need later.\n            Str.get_strings(stringArr).then(stringReturn => { // Save string to global to be used later.\n                stringResult = stringReturn;\n            });\n\n            // Get the system timzone.\n            Ajax.call([{\n                methodname: 'local_assessfreq_get_system_timezone',\n                args: {},\n            }], true, false)[0].then((response) => {\n                systemTimezone = response;\n                return;\n            }).fail(() => {\n                Notification.exception(new Error('Failed to get system timezone'));\n            });\n\n            Str.get_string('schedule', 'local_assessfreq').then((title) => {\n                dayViewTitle = title;\n\n                // Create the Modal.\n                ModalFactory.create({\n                    type: ModalLarge.TYPE,\n                    title: title,\n                    body: spinner\n                })\n                .done((modal) => {\n                    modalObj = modal;\n\n                });\n            });\n\n        };\n\n        return Dayview;\n    }\n);\n"],"names":["define","Str","Notification","ModalFactory","ModalLarge","Templates","Ajax","modalObj","Dayview","spinner","stringArr","key","component","stringResult","systemTimezone","dayViewTitle","getUserDate","timestamp","format","Promise","resolve","systemTimezoneTime","Date","toLocaleString","timeZone","date","year","getFullYear","month","getMonth","day","getDate","strftimetime","getHours","getMinutes","substr","formatData","async","response","responseArr","JSON","parse","scaler","i","length","endyear","endmonth","endday","dayStart","getTime","timeStart","timestart","timeStartTimestamp","timeEnd","timeend","timeEndTimestamp","secondsSinceDayStart","leftMargin","width","start","leftmargin","end","display","setBody","show","args","modules","jsonArgs","stringify","call","methodname","jsondata","then","context","rows","dayDate","parseInt","setTitle","render","fail","exception","Error","init","get_strings","stringReturn","get_string","title","create","type","TYPE","body","done","modal"],"mappings":"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"}