{"version":3,"file":"dashboard_quiz.min.js","sources":["../src/dashboard_quiz.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript for report card display and processing.\n *\n * @module     local_assessfreq/dashboard_quiz\n * @package    local_assessfreq\n * @copyright  2020 Matt Porritt <mattp@catalyst-au.net>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from 'core/ajax';\nimport Notification from 'core/notification';\nimport * as Str from 'core/str';\nimport Templates from 'core/templates';\nimport * as ChartData from 'local_assessfreq/chart_data';\nimport * as FormModal from 'local_assessfreq/form_modal';\nimport OverrideModal from 'local_assessfreq/override_modal';\nimport * as TableHandler from 'local_assessfreq/table_handler';\nimport * as UserPreference from 'local_assessfreq/user_preferences';\nimport * as ZoomModal from 'local_assessfreq/zoom_modal';\n\n// Module level variables.\n\nvar selectQuizStr = '';\nvar contextid;\nvar quizId = 0;\nvar refreshPeriod = 60;\nvar counterid;\n\nconst cards = [\n    {cardId: 'local-assessfreq-quiz-summary-graph', call: 'participant_summary', aspect: true},\n    {cardId: 'local-assessfreq-quiz-summary-trend', call: 'participant_trend', aspect: false}\n];\n\n/**\n * Function for refreshing the counter.\n *\n * @param {boolean} reset the current count process.\n */\nconst refreshCounter = (reset = true) => {\n    let progressElement = document.getElementById('local-assessfreq-period-progress');\n\n    // Reset the current count process.\n    if (reset === true) {\n        clearInterval(counterid);\n        counterid = null;\n        progressElement.setAttribute('style', 'width: 100%');\n        progressElement.setAttribute('aria-valuenow', 100);\n    }\n\n    // Exit early if there is already a counter running.\n    if (counterid) {\n        return;\n    }\n\n    counterid = setInterval(() => {\n        let progressWidthAria = progressElement.getAttribute('aria-valuenow');\n        const progressStep = 100 / refreshPeriod;\n\n        if ((progressWidthAria - progressStep) > 0) {\n            progressElement.setAttribute('style', 'width: ' + (progressWidthAria - progressStep) + '%');\n            progressElement.setAttribute('aria-valuenow', (progressWidthAria - progressStep));\n        } else {\n            clearInterval(counterid);\n            counterid = null;\n            progressElement.setAttribute('style', 'width: 100%');\n            progressElement.setAttribute('aria-valuenow', 100);\n            processDashboard(quizId);\n            refreshCounter();\n        }\n    }, (1000));\n};\n\n/**\n * Callback function that is called when a quiz is selected from the form.\n * Starts the processing of the dashboard.\n *\n * @param {int} quiz The quiz Id.\n */\nconst processDashboard = (quiz) => {\n    quizId = quiz;\n    let titleElement = document.getElementById('local-assessfreq-quiz-title');\n    titleElement.innerHTML = selectQuizStr;\n    // Get quiz data.\n    Ajax.call([{\n        methodname: 'local_assessfreq_get_quiz_data',\n        args: {\n            quizid: quiz\n        },\n    }])[0].then((response) => {\n\n        let quizArray = JSON.parse(response);\n        let cardsElement = document.getElementById('local-assessfreq-quiz-dashboard-cards-deck');\n        let trendElement = document.getElementById('local-assessfreq-quiz-dashboard-participant-trend-deck');\n        let summaryElement = document.getElementById('local-assessfreq-quiz-summary-card');\n        let summarySpinner = summaryElement.getElementsByClassName('overlay-icon-container')[0];\n        let tableElement = document.getElementById('local-assessfreq-quiz-table');\n        let periodElement = document.getElementById('local-assessfreq-period-container');\n        let tableSearchInputElement = document.getElementById('local-assessfreq-quiz-student-table-search');\n        let tableSearchResetElement = document.getElementById('local-assessfreq-quiz-student-table-search-reset');\n        let tableSearchRowsElement = document.getElementById('local-assessfreq-quiz-student-table-rows');\n\n        let quizLink = document.createElement('a');\n        quizLink.href = quizArray.url;\n        quizLink.innerHTML = '<i class=\"fa fa-link fa-flip-vertical fa-fw\"></i>';\n        titleElement.innerHTML = quizArray.name + '&nbsp;';\n        titleElement.appendChild(quizLink);\n\n        // Update page URL with quiz ID, without reloading page so that page navigation and bookmarking works.\n        const currentdUrl = new URL(window.location.href);\n        const newUrl = currentdUrl.origin + currentdUrl.pathname + '?id=' + quizId;\n        history.pushState({}, '', newUrl);\n\n        // Update page title with quiz name.\n        Str.get_string('dashboard:quiztitle', 'local_assessfreq', {'quiz': quizArray.name, 'course': quizArray.courseshortname})\n        .then((str) => {\n            document.title = str;\n        });\n\n        // Populate quiz summary card with details.\n        Templates.render('local_assessfreq/quiz-summary-card-content', quizArray).done((html) => {\n            summarySpinner.classList.add('hide');\n            let contentcontainer = document.getElementById('local-assessfreq-quiz-summary-card-content');\n            Templates.replaceNodeContents(contentcontainer, html, '');\n        }).fail(() => {\n            Notification.exception(new Error('Failed to load quiz summary template.'));\n            return;\n        });\n\n        // Show the cards.\n        cardsElement.classList.remove('hide');\n        trendElement.classList.remove('hide');\n        tableElement.classList.remove('hide');\n        periodElement.classList.remove('hide');\n\n        ChartData.getCardCharts(quizId);\n        TableHandler.getTable(quizId);\n        refreshCounter();\n\n        tableSearchInputElement.addEventListener('keyup', TableHandler.tableSearch);\n        tableSearchInputElement.addEventListener('paste', TableHandler.tableSearch);\n        tableSearchResetElement.addEventListener('click', TableHandler.tableSearchReset);\n        tableSearchRowsElement.addEventListener('click', TableHandler.tableSearchRowSet);\n\n        return;\n    }).fail(() => {\n        Notification.exception(new Error('Failed to get quiz data'));\n    });\n};\n\n/**\n * Handle processing of refresh and period button actions.\n *\n * @param {Event} event The triggered event for the element.\n */\nconst refreshAction = (event) => {\n    event.preventDefault();\n    var element = event.target;\n\n    if (element.closest('button') !== null && element.closest('button').id === 'local-assessfreq-refresh-quiz-dashboard') {\n        refreshCounter(true);\n        processDashboard(quizId);\n    } else if (element.tagName.toLowerCase() === 'a') {\n        refreshPeriod = element.dataset.period;\n        refreshCounter(true);\n        UserPreference.setUserPreference('local_assessfreq_quiz_refresh_preference', refreshPeriod);\n    }\n};\n\n/**\n * Trigger the zoom graph. Thin wrapper to add extra data to click event.\n *\n * @param {Event} event The triggered event for the element.\n */\nconst triggerZoomGraph = (event) => {\n    let call = event.target.closest('div').dataset.call;\n    let params = {'data': JSON.stringify({'quiz': quizId, 'call': call})};\n    let method = 'get_quiz_chart';\n\n    ZoomModal.zoomGraph(event, params, method);\n};\n\n/**\n * Initialise method for quiz dashboard rendering.\n *\n * @param {int} context The context id.\n * @param {int} quiz The quiz id.\n */\nexport const init = (context, quiz) => {\n    contextid = context;\n    FormModal.init(context, processDashboard); // Create modal for quiz selection modal.\n    ZoomModal.init(context); // Create the zoom modal.\n    OverrideModal.init(context, processDashboard);\n    TableHandler.init(\n        quizId,\n        contextid,\n        'local-assessfreq-quiz-student-table',\n        'local-assessfreq-quiz-table',\n        'get_student_table',\n        'local_assessfreq_quiz_table_rows_preference',\n        'local-assessfreq-quiz-student-table-search',\n        'local_assessfreq_student_table',\n        'local_assessfreq_set_table_preference'\n    );\n    ChartData.init(cards, context, 'get_quiz_chart', 'local_assessfreq/chart');\n    Str.get_string('loadingquiztitle', 'local_assessfreq').then((str) => {\n        selectQuizStr = str;\n    }).then(() => {\n        if (quiz > 0) {\n            quizId = quiz;\n            processDashboard(quiz);\n        }\n    });\n\n    UserPreference.getUserPreference('local_assessfreq_quiz_refresh_preference')\n    .then((response) => {\n        refreshPeriod = response.preferences[0].value ? response.preferences[0].value : 60;\n    })\n    .fail(() => {\n        Notification.exception(new Error('Failed to get use preference: refresh'));\n    });\n\n    // Event handling for refresh and period buttons.\n    let refreshElement = document.getElementById('local-assessfreq-period-container');\n    refreshElement.addEventListener('click', refreshAction);\n\n    // Set up zoom event listeners.\n    let summaryZoom = document.getElementById('local-assessfreq-quiz-summary-graph-zoom');\n    summaryZoom.addEventListener('click', triggerZoomGraph);\n\n    let trendZoom = document.getElementById('local-assessfreq-quiz-summary-trend-zoom');\n    trendZoom.addEventListener('click', triggerZoomGraph);\n\n};\n"],"names":["contextid","counterid","selectQuizStr","quizId","refreshPeriod","cards","cardId","call","aspect","refreshCounter","reset","progressElement","document","getElementById","clearInterval","setAttribute","setInterval","progressWidthAria","getAttribute","progressStep","processDashboard","quiz","titleElement","innerHTML","methodname","args","quizid","then","response","quizArray","JSON","parse","cardsElement","trendElement","summarySpinner","getElementsByClassName","tableElement","periodElement","tableSearchInputElement","tableSearchResetElement","tableSearchRowsElement","quizLink","createElement","href","url","name","appendChild","currentdUrl","URL","window","location","newUrl","origin","pathname","history","pushState","Str","get_string","courseshortname","str","title","render","done","html","classList","add","contentcontainer","replaceNodeContents","fail","exception","Error","remove","ChartData","getCardCharts","TableHandler","getTable","addEventListener","tableSearch","tableSearchReset","tableSearchRowSet","refreshAction","event","preventDefault","element","target","closest","id","tagName","toLowerCase","dataset","period","UserPreference","setUserPreference","triggerZoomGraph","params","stringify","ZoomModal","zoomGraph","context","FormModal","init","getUserPreference","preferences","value"],"mappings":"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"}